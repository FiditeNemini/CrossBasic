////assigns.xs////

Sub ChangeValue(a As Integer, b As Integer, Assigns c As Integer)
    print("a=" + str(a) + "  b=" + str(b) + "  c=" + str(c))
End Sub

ChangeValue(5,4) = 10   // prints  a=5  b=4  c=10

////EOF////

////binaryinputstream-class.xs////

// -----------------------------------------------------------------------------
// Demo: BinaryInputStream Usage in CrossBasic
// This code demonstrates how to use the BinaryInputStream class to open,
// read, and process binary data from a file. It showcases reading various
// data types (byte, short, long, double, string) and outputs them to the console.
// -----------------------------------------------------------------------------

// Create an instance of BinaryInputStream to handle binary file operations
Var stream As New BinaryInputStream

// Specify the path of the binary file to read from
stream.FilePath = "example.bin"

// Attempt to open the binary file for reading
If stream.Open() = False Then
  // If the file couldn't be opened, output an error message and exit
  Print("Failed to open file.")
  Return 0
End If

// Read a single byte (8 bits) from the file
Var byteValue As Integer = stream.ReadByte()

// Read a 2-byte (16-bit) integer from the file
Var shortValue As Integer = stream.ReadShort()

// Read a 4-byte (32-bit) integer from the file
Var longValue As Integer = stream.ReadLong()

// Read an 8-byte (64-bit) floating-point number from the file
Var doubleValue As Double = stream.ReadDouble()

// Read 10 bytes from the file and convert them to a string
Var textData As String = stream.ReadString(10)

// Display the values read from the binary file to the console
Print("Byte: " + byteValue.ToString)
Print("Short: " + shortValue.ToString)
Print("Long: " + longValue.ToString)
Print("Double: " + doubleValue.ToString)
Print("Text: " + textData)

// Close the file stream to release the file handle
stream.Close()

////EOF////

////binaryoutputstream-class.xs////

// -----------------------------------------------------------------------------
// Demo: BinaryOutputStream Usage in CrossBasic
// This code demonstrates how to use the BinaryOutputStream class to create
// and write binary data to a file. It shows how to write different data types
// (byte, short, long, double, string) and properly flush and close the stream.
// -----------------------------------------------------------------------------

// Create an instance of BinaryOutputStream to handle binary file writing
Var stream As New BinaryOutputStream

// Specify the target binary file path and disable append mode to overwrite the file
stream.FilePath = "example.bin"
stream.Append = False

// Attempt to open the binary file for writing
If stream.Open() = false Then
  // If the file couldn't be opened, display an error and exit
  Print("Failed to open file.")
  Return 0
End If

// Write a single byte (8 bits) with the value 255 to the file
stream.WriteByte(255)

// Write a 2-byte (16-bit) integer with the value 32000
stream.WriteShort(32000)

// Write a 4-byte (32-bit) integer with the value 123456789
stream.WriteLong(123456789)

// Write an 8-byte (64-bit) floating-point number representing Pi
stream.WriteDouble(3.14159)

// Write a string "Hello" to the binary file (typically stored as raw bytes)
stream.WriteString("Hello")

// Flush the stream to ensure all buffered data is written to disk
stream.Flush()

// Close the stream to release the file handle
stream.Close()

// Notify that the binary file has been written successfully
Print("Binary file written successfully.")

////EOF////

////bug.xs////

Module Foo
  Function Bar() As Integer
    Return 1
  End Function        // comment
End Module            // <- comment this out to see the same crash
print("hi")
print(str(Bar()))

////EOF////

////calculator.xs////

// CrossBasic CalculatorDemo

// Create the main window
Var win As New XWindow
win.Width   = 257
win.Height  = 387
win.HasMaximizeButton = False
Win.Resizable = False
win.Title = "Calculator"

// Create the display text field
Var txt As New XTextField
txt.Left      = 10
txt.Top       = 10
txt.Width     = 230
txt.Height    = 40
txt.Parent    = win.Handle
txt.FontName  = "Arial"
txt.FontSize  = 32
txt.Bold = True
txt.TextColor = &cFFFF00
txt.Text      = "0"

// Calculator state
Var operand1   As Double  = 0
Var operand2   As Double  = 0
Var currentOp  As String  = ""
Var isNewEntry As Boolean = True

// Layout parameters
Dim btnSize  As Integer = 50
Dim spacing  As Integer = 10
Dim startX   As Integer = 10
Dim startY   As Integer = txt.Top + txt.Height + spacing

// ——— Handlers ———

Sub OnNumber(label As String)
  If isNewEntry Then
    txt.Text      = label
    isNewEntry    = False
  Else
    txt.Text      = txt.Text + label
  End If
End Sub

Sub Zero()
    OnNumber("0")
End Sub
Sub One()
    OnNumber("1")
End Sub
Sub Two()
    OnNumber("2")
End Sub
Sub Three()
    OnNumber("3")
End Sub
Sub Four()
    OnNumber("4")
End Sub
Sub Five()
    OnNumber("5")
End Sub
Sub Six()
    OnNumber("6")
End Sub
Sub Seven()
    OnNumber("7")
End Sub
Sub Eight()
    OnNumber("8")
End Sub
Sub Nine()
    OnNumber("9")
End Sub

Sub Plus()
    OnOperator("+")
End Sub

Sub Minus()
    OnOperator("-")
End Sub

Sub Mult()
    OnOperator("*")
End Sub

Sub Div()
    OnOperator("/")
End Sub

Sub OnOperator(op As String)
  operand1     = Val(txt.Text)
  currentOp    = op
  isNewEntry   = True
End Sub

Sub OnEqual()
  operand2     = Val(txt.Text)
  Var result As Double
  Select Case currentOp
    Case "+"
        result = operand1 + operand2
    Case "-"
        result = operand1 - operand2
    Case "*"
        result = operand1 * operand2
    Case "/" 
      If operand2 <> 0 Then 
        result = operand1 / operand2 
      Else 
        result = 0
      End If
    Case Else
        result = Val(txt.Text)
  End Select
  txt.Text      = Str(result)
  isNewEntry    = True
End Sub

Sub OnC()
    txt.Text      = "0"
    operand1      = 0
    operand2      = 0
    currentOp     = ""
    isNewEntry    = True
End Sub

Sub OnCE()
    txt.Text      = "0"
    isNewEntry    = True
End Sub

// ——— Create buttons ———

Dim x As Integer
Dim y As Integer
Dim ClearType as String

// Row 1: C, CE, /, *
y = startY
x = startX
Var btnC As New XButton
btnC.Left      = x
btnC.Top       = y
btnC.Width     = btnSize
btnC.Height    = btnSize
btnC.Parent    = win.Handle
btnC.Caption   = "C"
AddHandler(btnC.Pressed, AddressOf(OnC))

x = x + btnSize + spacing
Var btnCE As New XButton
btnCE.Left     = x
btnCE.Top      = y
btnCE.Width    = btnSize
btnCE.Height   = btnSize
btnCE.Parent   = win.Handle
btnCE.Caption  = "CE"

AddHandler(btnCE.Pressed, AddressOf(OnCE))

x = x + btnSize + spacing
Var btnDiv As New XButton
btnDiv.Left    = x
btnDiv.Top     = y
btnDiv.Width   = btnSize
btnDiv.Height  = btnSize
btnDiv.Parent  = win.Handle
btnDiv.Caption = "/"

AddHandler(btnDiv.Pressed, AddressOf(Div))

x = x + btnSize + spacing
Var btnMul As New XButton
btnMul.Left    = x
btnMul.Top     = y
btnMul.Width   = btnSize
btnMul.Height  = btnSize
btnMul.Parent  = win.Handle
btnMul.Caption = "*"

AddHandler(btnMul.Pressed, AddressOf(Mult))

// Row 2: 7, 8, 9, –
y = y + btnSize + spacing
x = startX
Var btn7 As New XButton
btn7.Left      = x
btn7.Top       = y
btn7.Width     = btnSize
btn7.Height    = btnSize
btn7.Parent    = win.Handle
btn7.Caption   = "7"

AddHandler(btn7.Pressed, AddressOf(Seven))

x = x + btnSize + spacing
Var btn8 As New XButton
btn8.Left      = x
btn8.Top       = y
btn8.Width     = btnSize
btn8.Height    = btnSize
btn8.Parent    = win.Handle
btn8.Caption   = "8"

AddHandler(btn8.Pressed, AddressOf(Eight))

x = x + btnSize + spacing
Var btn9 As New XButton
btn9.Left      = x
btn9.Top       = y
btn9.Width     = btnSize
btn9.Height    = btnSize
btn9.Parent    = win.Handle
btn9.Caption   = "9"

AddHandler(btn9.Pressed, AddressOf(Nine))

x = x + btnSize + spacing
Var btnMinus As New XButton
btnMinus.Left     = x
btnMinus.Top      = y
btnMinus.Width    = btnSize
btnMinus.Height   = btnSize
btnMinus.Parent   = win.Handle
btnMinus.Caption  = "-"

AddHandler(btnMinus.Pressed, AddressOf(Minus))

// Row 3: 4, 5, 6, +
y = y + btnSize + spacing
x = startX
Var btn4 As New XButton
btn4.Left      = x
btn4.Top       = y
btn4.Width     = btnSize
btn4.Height    = btnSize
btn4.Parent    = win.Handle
btn4.Caption   = "4"

AddHandler(btn4.Pressed, AddressOf(Four))

x = x + btnSize + spacing
Var btn5 As New XButton
btn5.Left      = x
btn5.Top       = y
btn5.Width     = btnSize
btn5.Height    = btnSize
btn5.Parent    = win.Handle
btn5.Caption   = "5"

AddHandler(btn5.Pressed, AddressOf(Five))

x = x + btnSize + spacing
Var btn6 As New XButton
btn6.Left      = x
btn6.Top       = y
btn6.Width     = btnSize
btn6.Height    = btnSize
btn6.Parent    = win.Handle
btn6.Caption   = "6"

AddHandler(btn6.Pressed, AddressOf(Six))

x = x + btnSize + spacing
Var btnPlus As New XButton
btnPlus.Left     = x
btnPlus.Top      = y
btnPlus.Width    = btnSize
btnPlus.Height   = btnSize
btnPlus.Parent   = win.Handle
btnPlus.Caption  = "+"

AddHandler(btnPlus.Pressed, AddressOf(Plus))

// Row 4: 1, 2, 3, =
y = y + btnSize + spacing
x = startX
Var btn1 As New XButton
btn1.Left      = x
btn1.Top       = y
btn1.Width     = btnSize
btn1.Height    = btnSize
btn1.Parent    = win.Handle
btn1.Caption   = "1"

AddHandler(btn1.Pressed, AddressOf(One))

x = x + btnSize + spacing
Var btn2 As New XButton
btn2.Left      = x
btn2.Top       = y
btn2.Width     = btnSize
btn2.Height    = btnSize
btn2.Parent    = win.Handle
btn2.Caption   = "2"

AddHandler(btn2.Pressed, AddressOf(Two))

x = x + btnSize + spacing
Var btn3 As New XButton
btn3.Left      = x
btn3.Top       = y
btn3.Width     = btnSize
btn3.Height    = btnSize
btn3.Parent    = win.Handle
btn3.Caption   = "3"

AddHandler(btn3.Pressed, AddressOf(Three))

x = x + btnSize + spacing
Var btnEqual As New XButton
btnEqual.Left     = x
btnEqual.Top      = y
btnEqual.Width    = btnSize
btnEqual.Height   = btnSize
btnEqual.Parent   = win.Handle
btnEqual.Caption  = "="

AddHandler(btnEqual.Pressed, AddressOf(OnEqual))

// Row 5: 0
y = y + btnSize + spacing
x = startX
Var btn0 As New XButton
btn0.Left      = x
btn0.Top       = y
btn0.Width     = btnSize
btn0.Height    = btnSize
btn0.Parent    = win.Handle
btn0.Caption   = "0"

AddHandler(btn0.Pressed, AddressOf(Zero))

// Quit handler
Sub AppQuit()
  Quit()
End Sub
AddHandler(win.closing, AddressOf(AppQuit))

// Show window and start event loop
win.Show()
While True
  DoEvents(100)
Wend

////EOF////

////datetime-class.xs////

// -----------------------------------------------------------------------------
// Demo: DateTime Class Usage in CrossBasic
// This example demonstrates how to create, initialize, and extract components
// from a DateTime object. It shows formatting, accessing individual time parts,
// and properly cleaning up after use.
// -----------------------------------------------------------------------------

// Create a new DateTime instance to represent a specific moment in time
Dim dt As New DateTime

// Initialize the DateTime with a specific date and time:
// Parameters: year=2025, month=3 (March), day=17, hour=20, minute=8, second=27
dt.Initialize(2025, 3, 17, 20, 8, 27)

// Output the complete formatted DateTime string to the console
Print("Specific DateTime: " + dt.ToString)

// Extract and display individual components of the date and time
Print("Year: " + dt.GetYear().ToString)     // Outputs: 2025
Print("Month: " + dt.GetMonth().ToString)   // Outputs: 3 (March)
Print("Day: " + dt.GetDay().ToString)       // Outputs: 17
Print("Hour: " + dt.GetHour().ToString)     // Outputs: 20 (8 PM)
Print("Minute: " + dt.GetMinute().ToString) // Outputs: 8
Print("Second: " + dt.GetSecond().ToString) // Outputs: 27

// Properly clean up by destroying the DateTime instance
dt.Destroy()

////EOF////

////dualwintest.xs////

Var NewView As New XWindow
NewView.Width = 375
NewView.Height = 667
NewView.BackgroundColor = &c1a1a1a
NewView.ViewType = 0
NewView.HasCloseButton = True
NewView.HasMinimizeButton = True
NewView.HasMaximizeButton = True
NewView.HasFullScreenButton = False
NewView.HasTitleBar = True
NewView.Resizable = True

AddHandler(NewView.Closing, AddressOf(NewView_Closing))

Sub NewView_Closing()
	Quit()
End Sub

Var Button As New XButton
Button.Parent = NewView.Handle
Button.Caption = "Button"
Button.TextColor = &c000000
Button.Bold = False
Button.Underline = False
Button.Italic = False
Button.FontName = "Arial"
Button.FontSize = 12
Button.Enabled = True
Button.Visible = True

AddHandler(Button.Pressed, AddressOf(Button_Pressed))

Sub Button_Pressed()
	'NewView2.ShowModal(NewView.Handle)
	NewView2.Show()
End Sub

Var Username As String = "Matthew"

// Show the window //////
NewView.Show()




Var NewView2 As New XWindow
NewView2.Width = 375
NewView2.Height = 375
NewView2.BackgroundColor = &cd2d2d2
NewView2.ViewType = 4
NewView2.HasCloseButton = True
NewView2.HasMinimizeButton = True
NewView2.HasMaximizeButton = True
NewView2.HasFullScreenButton = False
NewView2.HasTitleBar = False
NewView2.Resizable = False


Var Button2 As New XButton
Button2.Parent = NewView2.Handle
Button2.Caption = "Button"
Button2.TextColor = &c000000
Button2.Bold = False
Button2.Underline = False
Button2.Italic = False
Button2.FontName = "Arial"
Button2.FontSize = 12
Button2.Enabled = True
Button2.Visible = True

AddHandler(Button2.Pressed, AddressOf(Button2_Pressed))

Sub Button2_Pressed()
    NewView2.Hide()
End Sub


While True
	DoEvents(1)
Wend
////EOF////

////editor.xs////

////editor.xs////

// -----------------------------------------------------------------------------
// Demo: Simple Single-File Text Editor in CrossBasic
// - Creates a window with a menu bar (File → Save, Exit)
// - Auto-opens "editor.txt" if it exists on startup
// - Allows editing the text in an XTextArea and saving back to "editor.txt"
// -----------------------------------------------------------------------------

// Main window setup
Var win As New XWindow
win.Title              = "CrossBasic Text Editor"
win.Width              = 800
win.Height             = 600
win.HasCloseButton     = True
win.HasMinimizeButton  = True
win.HasMaximizeButton  = False
win.HasFullScreenButton = False
win.HasTitleBar        = True
win.Resizable          = True

AddHandler(win.Closing, AddressOf(OnExit))

// Menu bar (File → Save, Exit) :contentReference[oaicite:0]{index=0}:contentReference[oaicite:1]{index=1}
Var menuBar As New XMenuBar
menuBar.Parent = win.Handle

// ——— File Menu ———
Var fileMenu As New XMenuItem
fileMenu.Parent  = menuBar.Handle
fileMenu.Caption = "File"

  // Save… :contentReference[oaicite:2]{index=2}:contentReference[oaicite:3]{index=3}
  Var saveItem As New XMenuItem
  saveItem.Parent  = fileMenu.Handle
  saveItem.Caption = "Save"
  AddHandler(saveItem.Pressed, AddressOf(OnSave))

  // Separator
  Var sep As New XMenuItem
  sep.Parent      = fileMenu.Handle
  sep.IsSeparator = True

  // Exit
  Var exitItem As New XMenuItem
  exitItem.Parent  = fileMenu.Handle
  exitItem.Caption = "Exit"
  AddHandler(exitItem.Pressed, AddressOf(OnExit))

// Text area for editing :contentReference[oaicite:4]{index=4}:contentReference[oaicite:5]{index=5}
Var editorArea As New XTextArea
editorArea.Parent = win.Handle
editorArea.Left   = 0
editorArea.Top    = 0    // leave room for the menu bar
editorArea.Width  = win.Width- 15
editorArea.Height = win.Height - (15 + 43)
editorArea.FontName = "Consolas"
editorArea.FontSize = 14
editorArea.TextColor = &cFFFFFF
editorArea.Visible   = True

AddHandler(editorArea.TextChanged, AddressOf(UpdateTextAreaPaint))

// Auto‑open file on startup :contentReference[oaicite:6]{index=6}:contentReference[oaicite:7]{index=7}
AddHandler(win.Opening, AddressOf(OnOpenFile))

// Show the window and enter main loop
win.Show()
While True
  DoEvents(200)
Wend

// ——— Event Handlers ———

// Load "editor.txt" into the text area
Sub OnOpenFile()
  Var inputStream As New TextInputStream
  inputStream.FilePath = "editor.txt"
  If inputStream.Open() = False Then
    // No existing file; start with empty editor
    editorArea.Text = ""
  End If

  // Read all lines and append to the editor
  editorArea.Text = ""
  While inputStream.EOF() = 0
    editorArea.Text = editorArea.Text + inputStream.ReadLine() + EndOfLine
  Wend
  inputStream.Close()
End Sub

// Save the contents of the text area back to "editor.txt"
Sub OnSave()
  Var outputStream As New TextOutputStream
  outputStream.FilePath = "editor.txt"
  outputStream.Append   = False
  If outputStream.Open() = False Then
    win.MessageBox("Failed to open file for saving.")
  End If
  Speak("File has been saved!")
  Print("Saved")
  // Write full contents without additional newlines
  outputStream.Write(editorArea.Text)
  return 0
End Sub

Sub UpdateTextAreaPaint()
  editorArea.Invalidate()
End Sub

// Exit the application
Sub OnExit()
  win.MessageBox("Goodbye world!")
  'win.close()
  Quit()
  return 0
End Sub

////EOF////

////EOF////

////folderitem-class.xs////

// -----------------------------------------------------------------------------
// Demo: FolderItem File and Directory Operations in CrossBasic
// This example demonstrates how to use the FolderItem class to interact with
// the filesystem. It includes checking for file existence, creating directories,
// retrieving and setting permissions, and deleting files.
// -----------------------------------------------------------------------------

// Create a FolderItem instance representing a file
Dim fileItem As New FolderItem
fileItem.Path = "testfile.txt"

// Check if the specified file exists on disk
If fileItem.Exists() Then
    Print("File exists!")
Else
    Print("File does not exist.")
End If

// Create a FolderItem instance representing a directory
Dim dirItem As New FolderItem
dirItem.Path = "./TestFolder"

// Attempt to create a new directory at the specified path
If dirItem.CreateDirectory() Then
    Print("Directory created successfully!")
Else
    Print("Failed to create directory.")
End If

// Retrieve the size of the file in bytes
Dim fileSize As Integer = fileItem.Size()
Print("File size: " + Str(fileSize) + " bytes")

// Determine if the FolderItem represents a directory or a regular file
If fileItem.IsDirectory() Then
    Print("This is a directory.")
Else
    Print("This is a file.")
End If

// Retrieve the full system path of the file
Dim fullPath As String = fileItem.GetPath()
Print("Full path: " + fullPath)

// Retrieve the file's current Unix-style permission value (e.g., 644)
Dim permissions As Integer = fileItem.GetPermission()
Print("File permissions: " + Str(permissions))

// Set new permissions for the file (only works on Unix-like systems)
Dim newPermissions As Integer = 644
If fileItem.SetPermission(newPermissions) Then
    Print("Permissions updated successfully!")
Else
    Print("Failed to change permissions.")
End If

// Retrieve the URL-safe version of the file path
Dim urlPath As String = fileItem.URLPath()
Print("URL Path: " + urlPath)

// Retrieve a shell-safe version of the file path (for use in scripts/commands)
Print("Shell Path: " + fileItem.ShellPath())

// Attempt to delete the file
If fileItem.Delete() Then
    Print("File deleted successfully!")
Else
    Print("Failed to delete file.")
End If

// Close the FolderItem instances to release system handles
fileItem.Close()
dirItem.Close()

////EOF////

////if-sums.xs////

' Sum the first 10 numbers
Dim sum As Integer = 0

For i As Integer = 1 To 10
  sum += i
Next i

Print("Sum = " + sum.ToString)  ' Outputs "Sum = 55"


' Sum the first 10 numbers starting from highest to lowest indices *(backward)*
sum = 0

For i As Integer = 10 DownTo 1
  sum += i
Next i

Print("Sum = " + sum.ToString)  ' Outputs "Sum = 55"


' Sum the first 10 numbers skipping 2
sum = 0

For i As Integer = 1 To 10 Step 2
  sum += i
Next i

Print("Sum = " + sum.ToString)  ' Outputs "Sum = 26"
////EOF////

////jsonitem-class.xs////

// -----------------------------------------------------------------------------
// Demo: JSONItem Usage in CrossBasic
// This example demonstrates creating and manipulating a JSON structure using
// the JSONItem class. It shows how to set values, nest arrays/objects, format
// output, check keys, retrieve values, and remove elements.
// -----------------------------------------------------------------------------


// Create a new JSONItem instance to hold structured data
Var jItem As New JSONItem

// Set key-value pairs for basic properties in the JSON object

jItem.SetValue("Name",    "John Doe")
jItem.SetValue("Age",     "32")
jItem.SetValue("Married", "true")
jItem.SetValue("Spouse",  "Jane Doe")


// Create a new JSONItem instance to hold an array of children
Var kids As New JSONItem
kids.Add("Alice")
kids.Add("Bob")
kids.Add("Charlie")

// Add the 'kids' array as a child object of the main JSON structure
jItem.SetValue("Kids", kids.toString) 


// Configure the JSON output: human-readable with indentation
jItem.Compact       = False        // Disable compact formatting
jItem.IndentSpacing = 4           // Use 4-space indentation

// Display the full formatted JSON string
Print("JSONItem ToString output:")
Print(jItem.toString)

// Print the number of top-level keys in the JSON object
Print("Count: " + Str(jItem.Count))

// Check for the existence of the "Name" key and output result
If jItem.HasKey("Name") Then
  Print("Name key exists.")
Else
  Print("Name key missing.")
End If

// Safely retrieve the value of the "Age" key, or return "Not Found" if missing
Print("Age: " + jItem.Lookup("Age", "Not Found")) //Returns a plain string
Print("Age: " + jItem.value("Age")) //Returns JSONItem converted to a String by Print()
Print("Name: " + jItem.value("Name")) //Returns JSONItem converted to a String by Print()

// Print a list of all keys in the JSON object
Print("Keys: " + jItem.Keys()) //JSONItem Array as String by Print()

// Remove the "Married" key from the object
jItem.Remove("Married")
Print("After removing 'Married': " + jItem.ToString)

// Release resources for both JSONItem instances
jItem.Close()
kids.Close()

////EOF////

////jsonitem-llm-message.xs////

// -----------------------------------------------------------------------------
// Demo: JSONItem Chat Message Construction for LLMs in CrossBasic
// This example simulates a chat conversation history using the JSONItem class.
// It creates role-based messages (system, user, assistant), organizes them into
// a structured array, and appends messages dynamically. Useful for LLM/Chat API calls.
// -----------------------------------------------------------------------------

// Create a root JSON object for the chat conversation
Var conversation As New JSONItem
conversation.SetValue("Title", "Chat Conversation")

// Create a JSON array to hold chat message entries
Var messages As New JSONItem
messages.Load("[]")  // Initialize as empty array

// Create the system message and set its role and content
Var systemMsg As New JSONItem
systemMsg.SetValue("role", "system")
systemMsg.SetValue("content", "You are a helpful assistant.")

// Create the first user message
Var userMsg As New JSONItem
userMsg.SetValue("role", "user")
userMsg.SetValue("content", "Hello, assistant!")

// Create the assistant's reply message
Var assistantMsg As New JSONItem
assistantMsg.SetValue("role", "assistant")
assistantMsg.SetValue("content", "Hello! How can I help you today?")

// Add each message to the messages array as serialized JSON strings
messages.Add(systemMsg.ToString)
messages.Add(userMsg.ToString)
messages.Add(assistantMsg.ToString)

// Store the messages array inside the main conversation object using the .Handle API
conversation.SetChild("messages", messages.Handle)

// Format the output JSON with indentation for readability
conversation.Compact = False
conversation.IndentSpacing = 2

// Output the full formatted conversation JSON
Print(EndOfLine + "Conversation JSON:")
Print(conversation.ToString)

// Access the messages array again from the conversation object for iteration
Var messagesArray As JSONItem = conversation.Child("messages")
Print(EndOfLine + "Messages loaded. Count: " + Str(messagesArray.Count))

// Loop through each message in the array and print its role and content
For i As Integer = 0 To messagesArray.Count - 1
  Var msgItem As New JSONItem
  msgItem.Load(messagesArray.ValueAt(i))  // Load JSON string into object
  Print("Message " + Str(i) + " (" + msgItem.Value("role") + "): " + _
        msgItem.Value("content"))
  msgItem.Close
Next

// Create and append a new user message asking for a joke
Var newUserMsg As New JSONItem
newUserMsg.SetValue("role", "user")
newUserMsg.SetValue("content", "Can you tell me a joke?")
messages.Add(newUserMsg.ToString)

// Update the conversation object with the modified messages array
conversation.SetChild("messages", messages.Handle)

// Output the updated conversation after appending a new message
Print(EndOfLine + "After adding a new message:")
Print(conversation.ToString)

// Clean up all JSONItem instances to free memory/resources
conversation.Close
messages.Close
messagesArray.Close
systemMsg.Close
userMsg.Close
assistantMsg.Close
newUserMsg.Close

////EOF////

////llmconnection-class.xs////

// -----------------------------------------------------------------------------
// Demo: LLMConnection Usage in CrossBasic
// This example demonstrates how to interact with a Large Language Model (LLM)
// using the LLMConnection class. It shows how to connect to a local LLM server
// (e.g., Ollama), send text completion requests, and format/display the responses.
// -----------------------------------------------------------------------------

// Create a new instance of the LLMConnection class for handling requests
Var llm As New LLMConnection

// Set the base API host URL for the LLM server (Ollama in this case)
llm.APIHost = "http://127.0.0.1:11434/v1/"

// Optionally set an API key and organization ID
// These fields are used by services like OpenAI but are not required for Ollama
llm.APIKey = ""
llm.Organization = ""

// Request a text completion using the model 'llama3.2:latest'
// Parameters: model name, prompt, max tokens, temperature (creativity)
Var completionResponse As String = llm.CreateCompletion( _
  "llama3.2:latest", _
  "Write an essay about Spartanburg, SC in markdown format", _
  1024, _
  0.7
)

// Output the essay response with markdown color formatting
Print "Text Completion Response: "
PrintColorMarkdown(completionResponse)

// (Optional) Uncomment this to request image generation if supported by the model/API
// Var imageUrl As String = llm.CreateImage( _
//   "gpt-4o", _
//   "A futuristic cityscape at night", _
//   1, _
//   "512x512"
// )
// Print "Generated Image URL: " + imageUrl

// Request another text completion to generate a fictional novel outline
Var outlineResponse As String = llm.CreateCompletion( _
  "llama3.2:latest", _
  "Create an outline for a fictional novel for young adults ages 18-22.", _
  1024, _
  0.7
)

// Output the outline response in markdown format
Print("Novel Outline: ")
PrintColorMarkdown(outlineResponse)

// Clean up the LLMConnection instance to release any resources
llm.Close()

////EOF////

////memoryblock-class.xs////

// -----------------------------------------------------------------------------
// Demo: MemoryBlock Usage in CrossBasic
// This example demonstrates how to allocate, write to, read from, resize, and
// copy data between memory blocks using the MemoryBlock class. It showcases
// binary manipulation, in-memory operations, and safe memory cleanup.
// -----------------------------------------------------------------------------

// Create a new MemoryBlock instance for binary data manipulation
Var memBlock As New MemoryBlock

// Resize the memory block to 16 bytes
memBlock.Resize(16)

// Write data to specific byte offsets:
// Write a single byte (value 255) at offset 0
memBlock.WriteByte(0, 255)

// Write a 2-byte short integer (value 32000) at offset 1
memBlock.WriteShort(1, 32000)

// Write a 4-byte long integer (value 123456789) at offset 4
memBlock.WriteLong(4, 123456789)

// Write an 8-byte double-precision float (value 3.14159) at offset 8
memBlock.WriteDouble(8, 3.14159)

// Read the values back from the same memory block offsets
Var byteVal   As Integer = memBlock.ReadByte(0)
Var shortVal  As Integer = memBlock.ReadShort(1)
Var longVal   As Integer = memBlock.ReadLong(4)
Var doubleVal As Double  = memBlock.ReadDouble(8)

// Print out the retrieved values
Print("Byte: "   + Str(byteVal))
Print("Short: "  + Str(shortVal))
Print("Long: "   + Str(longVal))
Print("Double: " + Str(doubleVal))

// Resize the memory block to 32 bytes (in-place expansion)
memBlock.Resize(32)
Print("Resized MemoryBlock to 32 bytes")

// Create a second MemoryBlock for copying data into
Var copyBlock As New MemoryBlock
copyBlock.Resize(32)

// Copy 16 bytes from memBlock to copyBlock, starting from offset 0 in both
copyBlock.CopyData(0, memBlock, 0, 16)
Print("Copied 16 bytes to new MemoryBlock")

// Clean up memory by explicitly closing the memory blocks
memBlock.Close()
copyBlock.Close()
Print("MemoryBlocks destroyed.")

////EOF////

////multidimensional-array.xs////

// -----------------------------------------------------------------------------
// Demo: Multidimensional Arrays in CrossBasic
// -----------------------------------------------------------------------------

// 1) Static 2D array (3 rows × 4 columns)
Var grid(2) As Integer

grid(0) = 2

print str(grid(2))
print str(grid(0))

var grid2(2,3) as Integer
grid2(0,1) = 13
////EOF////

////opengl.xs////

' opengl_torus.xs
' Demo: Render a rotating torus with XOpenGLSurface


Const GL_COLOR_BUFFER_BIT       = 16384     ' 0x00004000
Const GL_DEPTH_BUFFER_BIT       = 256       ' 0x00000100
Const GL_TRIANGLES              = 4         ' 0x0004
Const GL_STATIC_DRAW            = 35044     ' 0x88E4
Const GL_ARRAY_BUFFER           = 34962     ' 0x8892
Const GL_ELEMENT_ARRAY_BUFFER   = 34963     ' 0x8893
Const GL_FLOAT                  = 5126      ' 0x1406
Const GL_UNSIGNED_INT           = 5125      ' 0x1405
Const GL_VERTEX_SHADER   = 35633   ' 0x8B31
Const GL_FRAGMENT_SHADER = 35632   ' 0x8B30


' 1. Create host window
' Var win As New XWindow
' win.Title              = "CrossBasic OpenGL Torus Demo"
' win.Width              = 800
' win.Height             = 600
' win.HasCloseButton     = True
' win.Resizable          = True

' win.show()

' 2. Load our plugin
Var gl As New XOpenGLSurface
'gl.parent = win.handle

If gl.Init(1024, 768, "OpenGL") = False Then
  MessageBox("Failed to initialize OpenGL")
  Quit()
End If

' 3. Define shaders
Dim fragmentSrc As String = _
"#version 330 core" + EndOfLine + _
"in vec3 FragPos;" + EndOfLine + _
"in vec3 Normal;" + EndOfLine + _
"" + EndOfLine + _
"uniform vec3 lightPos;" + EndOfLine + _
"uniform vec3 viewPos;" + EndOfLine + _
"" + EndOfLine + _
"out vec4 FragColor;" + EndOfLine + _
"" + EndOfLine + _
"void main() {" + EndOfLine + _
"  vec3 norm = normalize(Normal);" + EndOfLine + _
"  vec3 lightDir = normalize(lightPos - FragPos);" + EndOfLine + _
"  float diff = max(dot(norm, lightDir), 0.0);" + EndOfLine + _
"  vec3 diffuse = diff * vec3(1.0);" + EndOfLine + _
"  vec3 ambient = 0.1 * vec3(1.0);" + EndOfLine + _
"  FragColor = vec4(ambient + diffuse, 1.0);" + EndOfLine + _
"}"

// 3. Define shaders
Dim vertexSrc As String = _
"#version 330 core" + EndOfLine + _
"layout(location = 0) in vec3 aPos;" + EndOfLine + _
"layout(location = 1) in vec3 aNormal;" + EndOfLine + _
"" + EndOfLine + _
"uniform mat4 model;" + EndOfLine + _
"uniform mat4 view;" + EndOfLine + _
"uniform mat4 projection;" + EndOfLine + _
"" + EndOfLine + _
"out vec3 FragPos;" + EndOfLine + _
"out vec3 Normal;" + EndOfLine + _
"" + EndOfLine + _
"void main() {" + EndOfLine + _
"  FragPos = vec3(model * vec4(aPos, 1.0));" + EndOfLine + _
"  Normal  = mat3(transpose(inverse(model))) * aNormal;" + EndOfLine + _
"  gl_Position = projection * view * vec4(FragPos, 1.0);" + EndOfLine + _
"}"


' 4. Compile & link program
Var vs As Integer = gl.CompileShader(GL_VERTEX_SHADER, vertexSrc)
Var fs As Integer = gl.CompileShader(GL_FRAGMENT_SHADER, fragmentSrc)
Var prog As Integer = gl.LinkProgram(vs, fs)
gl.UseProgram(prog)

' 5. Generate torus geometry in-script
Const numMajor = 32
Const numMinor = 32
Const majorR = 1.0
Const minorR = 0.4

Dim verts() As Double
Dim norms() As Double
Dim idxs() As Integer

For i As Integer = 0 To numMajor
  Dim a0 = i * 2 * PI / numMajor
  Dim x0 = Cos(a0)
  Dim y0 = Sin(a0)
  For j As Integer = 0 To numMinor
    Dim a1 = j * 2 * PI / numMinor
    Dim x1 = Cos(a1)
    Dim y1 = Sin(a1)
    verts.add((majorR + minorR * x1) * x0)
    verts.add((majorR + minorR * x1) * y0)
    verts.add(minorR * y1)
    norms.add(x1 * x0)
    norms.add(x1 * y0)
    norms.add(y1)
  Next j
Next i

For i As Integer = 0 To numMajor - 1
  For j As Integer = 0 To numMinor - 1
    Dim a = i * (numMinor + 1) + j
    Dim b = ((i + 1) Mod numMajor) * (numMinor + 1) + j
    Dim c = b + 1
    Dim d = a + 1
    idxs.add(a)
    idxs.add(b)
    idxs.add(d)
    idxs.add(b)
    idxs.add(c)
    idxs.add(d)
  Next j
Next i

' 6. Upload to GPU
Dim vao As Integer = gl.CreateVertexArray()
gl.BindVertexArray(vao)

Dim vboPos As Integer = gl.CreateBuffer()
gl.BindBuffer(GL_ARRAY_BUFFER, vboPos)
gl.BufferData(GL_ARRAY_BUFFER, verts, verts.LastIndex() * 8, GL_STATIC_DRAW)
gl.VertexAttribPointer(0, 3, GL_FLOAT, False, 0, 0)
gl.EnableVertexAttrib(0)

Dim vboNorm As Integer = gl.CreateBuffer()
gl.BindBuffer(GL_ARRAY_BUFFER, vboNorm)
gl.BufferData(GL_ARRAY_BUFFER, norms, norms.LastIndex() * 8, GL_STATIC_DRAW)
gl.VertexAttribPointer(1, 3, GL_FLOAT, False, 0, 0)
gl.EnableVertexAttrib(1)

Dim ibo As Integer = gl.CreateBuffer()
gl.BindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo)
gl.BufferData(GL_ELEMENT_ARRAY_BUFFER, idxs, idxs.LastIndex() * 4, GL_STATIC_DRAW)

// 7. Main loop
While gl.ShouldClose() = False
  gl.Clear(GL_COLOR_BUFFER_BIT Or GL_DEPTH_BUFFER_BIT)
  gl.UseProgram(prog)

  // Update transforms
  Dim t = gl.GetTime()
  Dim model(16) As Double '' model(16)

  model = gl.IdentityMatrix4()
  model = gl.RotateMatrix4(model, t, 0.5, 1.0, 0.0)
  gl.UniformMatrix4fv(gl.GetUniformLocation(prog, "model"), 1, False, model)
  
  Dim view(16) As Double 
  
  view = gl.LookAtMatrix4(0,0,5, 0,0,0, 0,1,0) ' view(16)
  gl.UniformMatrix4fv(gl.GetUniformLocation(prog, "view"), 1, False, view)

  Dim proj(16) as Double ' proj(16)


 proj = gl.PerspectiveMatrix4(45, 1024 / 768, 0.1, 100) 

  gl.UniformMatrix4fv(gl.GetUniformLocation(prog, "projection"), 1, False, proj)

  gl.Uniform3f(gl.GetUniformLocation(prog, "lightPos"), 3.0, 3.0, 3.0)
  gl.Uniform3f(gl.GetUniformLocation(prog, "viewPos"), 0.0, 0.0, 5.0)

  gl.DrawElements(GL_TRIANGLES, idxs.LastIndex() + 1, GL_UNSIGNED_INT, 0)
  gl.SwapGLBuffers()   // pass window handle if plugin supports embed
  gl.PollEvents()
Wend

' while True
'  Doevents(1)
' wend

'Quit()

////EOF////

////replace.xs////

// -----------------------------------------------------------------------------
// Demo: String Replacement Functions in CrossBasic
// This example demonstrates how to use `Replace` and `ReplaceAll` functions
// to perform substring replacements in strings. `Replace` affects the first match
// only (or specific instances), while `ReplaceAll` affects all occurrences.
// -----------------------------------------------------------------------------

// Create a string with a phrase to be partially removed
Var s As String = "hello world"

// Use Replace to remove " world" from the string
// Expected output: "hello"
Print(Replace(s, " world", ""))

// Create another string with a longer sentence
Var fox As String = "The quick brown fox jumped over the lazy dog."

// Use ReplaceAll to replace all occurrences of "the" with "a"
// Note: ReplaceAll is case-sensitive, so "The" remains unchanged
// Expected output: "The quick brown fox jumped over a lazy dog."
Print(ReplaceAll(fox, "the", "a"))

////EOF////

////shell-class.xs////

// -----------------------------------------------------------------------------
// Demo: Shell Command Execution in CrossBasic
// This example demonstrates how to execute a shell command using the Shell class,
// retrieve its output and exit code, and handle potential execution failures.
// -----------------------------------------------------------------------------

// Create a new Shell instance to run system commands
Var shell As New Shell

// Define the shell command to execute (e.g., list directory contents)
Var command As String = "ls"

// Set the execution timeout to 5 seconds (prevents hanging processes)
shell.SetTimeout(5)

// Execute the command using the shell
If shell.Execute(command) Then
    // If execution succeeds, print the command's standard output
    Print("Command Output: " + shell.Result)

    // Also print the numeric exit code returned by the command
    Print("Exit Code: " + Str(shell.ExitCode))
Else
    // If execution fails, display an error message
    Print("Failed to execute command.")
End If

// Clean up the Shell instance
shell.Close()

////EOF////

////simcipher-class.xs////

// -----------------------------------------------------------------------------
// Demo: SimCipher Cryptographic Operations in CrossBasic
// This example demonstrates how to use the SimCipher class for RSA-style
// cryptographic operations, including key generation, encryption/decryption,
// signing, and signature verification.
// -----------------------------------------------------------------------------

// Create a new instance of the SimCipher cryptographic class
Var cipher As New SimCipher

// Generate a 1024-bit RSA-like keypair
// The returned format is: "modulus|publicExponent|modulus|privateExponent"
Var keys As String = cipher.GenerateKeys(1024)
Print "Raw Generated Keys: " + keys

// Split the key string into parts for clarity and access
Var parts() As String = Split(keys, "|")

// Check if the format is as expected (4 parts total)
If parts.LastIndex() = 3 Then
  // Extract the key components
  Var modulus    As String = parts(0)  // Also serves as private modulus
  Var publicExp  As String = parts(1)
  Var privateExp As String = parts(3)

  Print("made")  // Optional debug confirmation

  // Display each extracted key piece
  Print "Public Modulus (n):    " + modulus
  Print "Public Exponent (e):   " + publicExp
  Print "Private Modulus (n):   " + modulus
  Print "Private Exponent (d):  " + privateExp
Else
  // Output an error message if the key format is incorrect
  Print "Unexpected key format – got " + Str(parts.LastIndex() + 1) + " parts."
End If

// Optionally load specific keys into the cipher instance (if using externally provided keys)
// Var loadResult As String = cipher.LoadKeys(modulus, privateExp)
// Print "Load Keys Result: " + loadResult

// Encrypt a plain message using the public key
Var plaintext As String = "Hello, secret world!"
Var ciphertext As String = cipher.EncryptMessage(plaintext)
Print "Ciphertext: " + ciphertext

// Decrypt the ciphertext using the private key
Var decrypted As String = cipher.DecryptMessage(ciphertext)
Print "Decrypted Text: " + decrypted

// Digitally sign a message using the private key
Var signature As String = cipher.SignMessage("This is a signed message.")
Print "Signature: " + signature

// Verify the signature using the public key
Var verifyResult As String = cipher.VerifySignature("This is a signed message.", signature)
Print "Signature Verified: " + verifyResult

// Clean up by destroying the cipher instance
cipher.Close()

////EOF////

////sqlitedatabase-class.xs////

// -----------------------------------------------------------------------------
// Demo: SQLiteDatabase Usage in CrossBasic
// This example demonstrates how to use the SQLiteDatabase and SQLiteStatement
// classes to create a database, execute SQL commands, insert records using
// prepared statements with parameter binding, and query data using a SELECT.
// -----------------------------------------------------------------------------

// Create a new SQLiteDatabase instance
Var db As New SQLiteDatabase

// Set the path of the SQLite database file and attempt to open it
db.DatabaseFile = "mydb.sqlite"
If db.Open() = False Then
    // If the database fails to open, print the error and exit
    Print("Failed to open database: " + db.LastError)
    Return 0
End If

// Create a new table named 'users' with 'id' and 'name' fields
db.ExecuteSQL("CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT)")
Print("Last Error: " + db.LastError)  // Print any error from table creation

// Create a new SQLiteStatement for inserting data
Var stmt As New SQLiteStatement
stmt.DatabaseHandle = db.Handle()   // Assign the database handle to the statement
stmt.SQL = "INSERT INTO users (name) VALUES (?)"  // Use parameter placeholder for safe insertion

// Prepare the INSERT statement
If stmt.Prepare() = False Then
    Print("Failed to prepare statement.")
    Return 0
End If

// Bind a string value ("John Doe") to the first placeholder and execute the statement
stmt.BindString(1, "John Doe")
stmt.Execute()
stmt.Finalize()  // Clean up after executing the insert

// Prepare a SELECT statement to retrieve all users
Var stmt As New SQLiteStatement
stmt.DatabaseHandle = db.Handle()
stmt.SQL = "SELECT id, name FROM users"

// Prepare and execute the SELECT statement
If stmt.Prepare() Then
    // Move to the first row, if any rows exist
    If stmt.MoveToFirstRow() Then
        // Loop through each row in the result set
        While stmt.MoveToNextRow() = True
            // Retrieve column values from current row
            Var id   As Integer = stmt.ColumnInteger(0)
            Var name As String  = stmt.ColumnString(1)

            // Print the row data
            Print("ID: " + Str(id) + ", Name: " + name)
        Wend
    End If
    stmt.Finalize()  // Finalize the SELECT statement
Else
    Print("Failed to prepare SELECT statement.")
End If

// Close the database to free up resources
db.Close()

////EOF////

////stringfuncs-test.xs////

// -----------------------------------------------------------------------------
// Demo: String Manipulation Functions in CrossBasic
// This example demonstrates trimming, case transformations, and substring
// operations including `Left`, `Right`, `Middle`, `Replace`, and `ReplaceAll`.
// -----------------------------------------------------------------------------

// Define a string with leading and trailing spaces
Dim s As String = "   hello world!   "

// Trim leading and trailing whitespace
Dim v As String = Trim(s)
Print("Length of '" + v + "' = " + Str(Len(v)))  // Expected: 12
Print(v)                                         // Expected: "hello world!"

// Print the rightmost 6 characters from the trimmed string
Print(Right(v, 6))                               // Expected: "world!"

// Print the leftmost 8 characters from the original (untrimmed) string
Print(Left(s, 8))                                // Expected: "   hello"

// Convert the original string to title case (capitalizes first letters)
Print(TitleCase(s))                              // Expected: "   Hello World!   "

// Convert the original string to all lowercase
Print(LowerCase(s))                              // Expected: "   hello world!   "

// Convert the original string to all uppercase
Print(UpperCase(s))                              // Expected: "   HELLO WORLD!   "


// Demonstrate substring and replacement functions
Dim s As String = "Hello, Open Source XojoScript World!"

// Extract a substring starting at position 8 (1-based), length 11
Print(Middle(s, 8, 11))                          // Expected: "Open Source"

// Replace first occurrence of "Open Source" with "Open-Source"
Print(Replace(s, "Open Source", "Open-Source"))  // Expected: "Hello, Open-Source XojoScript World!"

// Replace all occurrences of lowercase "o" with "0" (case-sensitive)
Print(ReplaceAll(s, "o", "0"))                   // Expected: "Hell0, Open S0urce X0j0Script W0rld!"

////EOF////

////t2.xs////

'#Application

Var NewView As New XWindow
NewView.Width = 375
NewView.Height = 400
NewView.BackgroundColor = &c1a1a1a
NewView.ViewType = 0
NewView.HasCloseButton = True
NewView.HasMinimizeButton = False
NewView.HasMaximizeButton = False
'NewView.HasFullScreenButton = False
NewView.HasTitleBar = True
NewView.Resizable = False

AddHandler(NewView.Closing, AddressOf(NewView_Closing))

Sub NewView_Closing()
	Quit()
End Sub

Var myButton As New XButton
myButton.Parent = NewView.Handle
myButton.Left = 50
myButton.Top = 50
myButton.Width = 100
myButton.Height = 42
myButton.Caption = "Wow!"
myButton.TextColor = &cffffff
myButton.Bold = False
myButton.Underline = False
myButton.Italic = False
myButton.FontName = "Arial"
myButton.FontSize = 12
myButton.Enabled = True
myButton.Visible = True

AddHandler(myButton.Pressed, AddressOf(myButton_Pressed))


Sub myButton_Pressed()

'Example Event Handler

Messagebox("Hello " + UserName + ", from CrossBasic!")
End Sub

var Username as String = "User"


// Show the window//////
NewView.Show()


While True
	DoEvents(1)
Wend


////EOF////

////t4.xs////

Var CalculatorDemo As New XWindow
CalculatorDemo.Width = 257
CalculatorDemo.Height = 387
CalculatorDemo.BackgroundColor = &c1a1a1a
CalculatorDemo.ViewType = 0
CalculatorDemo.HasCloseButton = True
CalculatorDemo.HasMinimizeButton = True
CalculatorDemo.HasMaximizeButton = False
CalculatorDemo.HasFullScreenButton = False
CalculatorDemo.HasTitleBar = True
CalculatorDemo.Resizable = False

AddHandler(CalculatorDemo.Closing, AddressOf(CalculatorDemo_Closing))

Sub CalculatorDemo_Closing()
	Quit()
End Sub

Var operand1 As Double = 0

Var operand2 As Double = 0

Var currentOp As String = ""

Var isNewEntry As Boolean = False

Sub OnNumber(label As String)
	If isNewEntry Then
	    txt.Text = label
	    isNewEntry = False
	Else
	    txt.Text = txt.Text + label
	End If
End Sub

Sub OnOperator(op As String)
	operand1 = Val(txt.Text)
	currentOp = op
	isNewEntry = True
End Sub

Sub OnEqual()
	operand2 = Val(txt.Text)
	Var result As Double
	Select Case currentOp
	  Case "+"
	      result = operand1 + operand2
	  Case "-"
	      result = operand1 - operand2
	  Case "*"
	      result = operand1 * operand2
	  Case "/"
	    If operand2 <> 0 Then
	      result = operand1 / operand2
	    Else
	      result = 0
	    End If
	  Case Else
	      result = Val(txt.Text)
	End Select
	txt.Text = Str(result)
	isNewEntry = True
End Sub

Sub OnC()
	txt.Text = "0"
	operand1 = 0
	operand2 = 0
	currentOp = ""
	isNewEntry = True
End Sub

Sub OnCE()
	txt.Text = "0"
	isNewEntry = True
End Sub

Var txt As New XTextField
txt.Parent = CalculatorDemo.Handle
txt.Left = 10
txt.Top = 10
txt.Width = 230
txt.Height = 40
txt.Text = "0"
txt.Fontname = "Arial"
txt.Fontsize = 32
txt.Textcolor = &cffff00
txt.Enabled = True
txt.Visible = True
txt.Bold = True

AddHandler(txt.TextChanged, AddressOf(txt_TextChanged))

Sub txt_TextChanged(Data As String)
	
End Sub

Var btnC As New XButton
btnC.Parent = CalculatorDemo.Handle
btnC.Left = 10
btnC.Top = 60
btnC.Width = 50
btnC.Height = 50
btnC.Caption = "C"
btnC.Bold = False
btnC.Underline = False
btnC.Italic = False
btnC.Fontname = "Arial"
btnC.Fontsize = 12
btnC.Textcolor = &cffffff
btnC.Enabled = True
btnC.Visible = True

AddHandler(btnC.Pressed, AddressOf(btnC_Pressed))

Sub btnC_Pressed()
	OnC()
End Sub

Var btnCE As New XButton
btnCE.Parent = CalculatorDemo.Handle
btnCE.Left = 70
btnCE.Top = 60
btnCE.Width = 50
btnCE.Height = 50
btnCE.Caption = "CE"
btnCE.Bold = False
btnCE.Underline = False
btnCE.Italic = False
btnCE.Fontname = "Arial"
btnCE.Fontsize = 12
btnCE.Textcolor = &cffffff
btnCE.Enabled = True
btnCE.Visible = True

AddHandler(btnCE.Pressed, AddressOf(btnCE_Pressed))

Sub btnCE_Pressed()
	OnCE()
End Sub

Var btnDiv As New XButton
btnDiv.Parent = CalculatorDemo.Handle
btnDiv.Left = 130
btnDiv.Top = 60
btnDiv.Width = 50
btnDiv.Height = 50
btnDiv.Caption = "/"
btnDiv.Bold = False
btnDiv.Underline = False
btnDiv.Italic = False
btnDiv.Fontname = "Arial"
btnDiv.Fontsize = 12
btnDiv.Textcolor = &cffffff
btnDiv.Enabled = True
btnDiv.Visible = True

AddHandler(btnDiv.Pressed, AddressOf(btnDiv_Pressed))

Sub btnDiv_Pressed()
	OnOperator("/")
End Sub

Var btnMul As New XButton
btnMul.Parent = CalculatorDemo.Handle
btnMul.Left = 190
btnMul.Top = 60
btnMul.Width = 50
btnMul.Height = 50
btnMul.Caption = "*"
btnMul.Bold = False
btnMul.Underline = False
btnMul.Italic = False
btnMul.Fontname = "Arial"
btnMul.Fontsize = 12
btnMul.Textcolor = &cffffff
btnMul.Enabled = True
btnMul.Visible = True

AddHandler(btnMul.Pressed, AddressOf(btnMul_Pressed))

Sub btnMul_Pressed()
	OnOperator("*")
End Sub

Var btn7 As New XButton
btn7.Parent = CalculatorDemo.Handle
btn7.Left = 10
btn7.Top = 120
btn7.Width = 50
btn7.Height = 50
btn7.Caption = "7"
btn7.Bold = False
btn7.Underline = False
btn7.Italic = False
btn7.Fontname = "Arial"
btn7.Fontsize = 12
btn7.Textcolor = &cffffff
btn7.Enabled = True
btn7.Visible = True

AddHandler(btn7.Pressed, AddressOf(btn7_Pressed))

Sub btn7_Pressed()
	OnNumber("7")
End Sub

Var btn8 As New XButton
btn8.Parent = CalculatorDemo.Handle
btn8.Left = 70
btn8.Top = 120
btn8.Width = 50
btn8.Height = 50
btn8.Caption = "8"
btn8.Bold = False
btn8.Underline = False
btn8.Italic = False
btn8.Fontname = "Arial"
btn8.Fontsize = 12
btn8.Textcolor = &cffffff
btn8.Enabled = True
btn8.Visible = True

AddHandler(btn8.Pressed, AddressOf(btn8_Pressed))

Sub btn8_Pressed()
	OnNumber("8")
End Sub

Var btn9 As New XButton
btn9.Parent = CalculatorDemo.Handle
btn9.Left = 130
btn9.Top = 120
btn9.Width = 50
btn9.Height = 50
btn9.Caption = "9"
btn9.Bold = False
btn9.Underline = False
btn9.Italic = False
btn9.Fontname = "Arial"
btn9.Fontsize = 12
btn9.Textcolor = &cffffff
btn9.Enabled = True
btn9.Visible = True

AddHandler(btn9.Pressed, AddressOf(btn9_Pressed))

Sub btn9_Pressed()
	OnNumber("9")
End Sub

Var btnMinus As New XButton
btnMinus.Parent = CalculatorDemo.Handle
btnMinus.Left = 190
btnMinus.Top = 120
btnMinus.Width = 50
btnMinus.Height = 50
btnMinus.Caption = "-"
btnMinus.Bold = False
btnMinus.Underline = False
btnMinus.Italic = False
btnMinus.Fontname = "Arial"
btnMinus.Fontsize = 12
btnMinus.Textcolor = &cffffff
btnMinus.Enabled = True
btnMinus.Visible = True

AddHandler(btnMinus.Pressed, AddressOf(btnMinus_Pressed))

Sub btnMinus_Pressed()
	OnOperator("-")
End Sub

Var btn4 As New XButton
btn4.Parent = CalculatorDemo.Handle
btn4.Left = 10
btn4.Top = 180
btn4.Width = 50
btn4.Height = 50
btn4.Caption = "4"
btn4.Bold = False
btn4.Underline = False
btn4.Italic = False
btn4.Fontname = "Arial"
btn4.Fontsize = 12
btn4.Textcolor = &cffffff
btn4.Enabled = True
btn4.Visible = True

AddHandler(btn4.Pressed, AddressOf(btn4_Pressed))

Sub btn4_Pressed()
	OnNumber("4")
End Sub

Var btn5 As New XButton
btn5.Parent = CalculatorDemo.Handle
btn5.Left = 70
btn5.Top = 180
btn5.Width = 50
btn5.Height = 50
btn5.Caption = "5"
btn5.Bold = False
btn5.Underline = False
btn5.Italic = False
btn5.Fontname = "Arial"
btn5.Fontsize = 12
btn5.Textcolor = &cffffff
btn5.Enabled = True
btn5.Visible = True

AddHandler(btn5.Pressed, AddressOf(btn5_Pressed))

Sub btn5_Pressed()
	OnNumber("5")
End Sub

Var btn6 As New XButton
btn6.Parent = CalculatorDemo.Handle
btn6.Left = 130
btn6.Top = 180
btn6.Width = 50
btn6.Height = 50
btn6.Caption = "6"
btn6.Bold = False
btn6.Underline = False
btn6.Italic = False
btn6.Fontname = "Arial"
btn6.Fontsize = 12
btn6.Textcolor = &cffffff
btn6.Enabled = True
btn6.Visible = True

AddHandler(btn6.Pressed, AddressOf(btn6_Pressed))

Sub btn6_Pressed()
	OnNumber("6")
End Sub

Var btnPlus As New XButton
btnPlus.Parent = CalculatorDemo.Handle
btnPlus.Left = 190
btnPlus.Top = 180
btnPlus.Width = 50
btnPlus.Height = 50
btnPlus.Caption = "+"
btnPlus.Bold = False
btnPlus.Underline = False
btnPlus.Italic = False
btnPlus.Fontname = "Arial"
btnPlus.Fontsize = 12
btnPlus.Textcolor = &cffffff
btnPlus.Enabled = True
btnPlus.Visible = True

AddHandler(btnPlus.Pressed, AddressOf(btnPlus_Pressed))

Sub btnPlus_Pressed()
	OnOperator("+")
End Sub

Var btn1 As New XButton
btn1.Parent = CalculatorDemo.Handle
btn1.Left = 10
btn1.Top = 240
btn1.Width = 50
btn1.Height = 50
btn1.Caption = "1"
btn1.Bold = False
btn1.Underline = False
btn1.Italic = False
btn1.Fontname = "Arial"
btn1.Fontsize = 12
btn1.Textcolor = &cffffff
btn1.Enabled = True
btn1.Visible = True

AddHandler(btn1.Pressed, AddressOf(btn1_Pressed))

Sub btn1_Pressed()
	OnNumber("1")
End Sub

Var btn2 As New XButton
btn2.Parent = CalculatorDemo.Handle
btn2.Left = 70
btn2.Top = 240
btn2.Width = 50
btn2.Height = 50
btn2.Caption = "2"
btn2.Bold = False
btn2.Underline = False
btn2.Italic = False
btn2.Fontname = "Arial"
btn2.Fontsize = 12
btn2.Textcolor = &cffffff
btn2.Enabled = True
btn2.Visible = True

AddHandler(btn2.Pressed, AddressOf(btn2_Pressed))

Sub btn2_Pressed()
	OnNumber("2")
End Sub

Var btn3 As New XButton
btn3.Parent = CalculatorDemo.Handle
btn3.Left = 130
btn3.Top = 240
btn3.Width = 50
btn3.Height = 50
btn3.Caption = "3"
btn3.Bold = False
btn3.Underline = False
btn3.Italic = False
btn3.Fontname = "Arial"
btn3.Fontsize = 12
btn3.Textcolor = &cffffff
btn3.Enabled = True
btn3.Visible = True

AddHandler(btn3.Pressed, AddressOf(btn3_Pressed))

Sub btn3_Pressed()
	OnNumber("3")
End Sub

Var btnEqual As New XButton
btnEqual.Parent = CalculatorDemo.Handle
btnEqual.Left = 190
btnEqual.Top = 240
btnEqual.Width = 50
btnEqual.Height = 50
btnEqual.Caption = "="
btnEqual.Bold = False
btnEqual.Underline = False
btnEqual.Italic = False
btnEqual.Fontname = "Arial"
btnEqual.Fontsize = 12
btnEqual.Textcolor = &cffffff
btnEqual.Enabled = True
btnEqual.Visible = True

AddHandler(btnEqual.Pressed, AddressOf(btnEqual_Pressed))

Sub btnEqual_Pressed()
	OnEqual()
End Sub

Var btn0 As New XButton
btn0.Parent = CalculatorDemo.Handle
btn0.Left = 10
btn0.Top = 300
btn0.Width = 50
btn0.Height = 50
btn0.Caption = "0"
btn0.Bold = False
btn0.Underline = False
btn0.Italic = False
btn0.Fontname = "Arial"
btn0.Fontsize = 12
btn0.Textcolor = &cffffff
btn0.Enabled = True
btn0.Visible = True

AddHandler(btn0.Pressed, AddressOf(btn0_Pressed))

Sub btn0_Pressed()
	OnNumber("0")
End Sub

// Show the window //////
CalculatorDemo.Show()

While True
	DoEvents(1)
Wend
////EOF////

////test-canvas-backdrop.xs////

Dim pic As New XPicture(320,240,32)
pic.Load("C:\Users\mcomb\Desktop\img.png")

Var win As New XWindow
win.Width  = 680
win.Height = 550

AddHandler(win.Closing, AddressOf(AppClosing))

Sub AppClosing()
  Quit()
End Sub

Var canvas As New XCanvas
canvas.Left   = 10
canvas.Top    = 10
canvas.Width  = 640
canvas.Height = 480
canvas.Parent = win.Handle         // creates the HWND and back-buffer

win.Show()

print str(pic.width)
print str(pic.height)

AddHandler(canvas.Paint, AddressOf(PaintHandler))

Function PaintHandler(g As XGraphics) as Boolean
  g.clear()
  g.DrawingColor = &cFF0000
  g.PenSize = 3
  g.DrawLine(0, 0, g.Width, g.Height)
  g.DrawPicture(pic, 0, 0, g.width, g.height)
  return true
End Function

canvas.Invalidate()

While True
    DoEvents(10)
Wend

////EOF////

////test-canvas-graphics-picture.xs////

'--------------------------------------------------------------------------------
'  XCanvas + XGraphics + XPicture Demo
'--------------------------------------------------------------------------------

' Create our main window
Dim win As New XWindow
win.Title = "XCanvas / XGraphics / XPicture Demo"
win.Width  = 650
win.Height = 500

'------------------------------------------------------------------------
'  1) Load an image from disk into an XPicture
'------------------------------------------------------------------------
Dim pic As New XPicture
pic.Load("C:\Users\mcomb\Desktop\img.png")    ' ← replace with a valid path

'------------------------------------------------------------------------
'  2) Create and position an XCanvas
'------------------------------------------------------------------------
Dim canvas As New XCanvas
canvas.Parent = win.Handle
canvas.Left   = 20
canvas.Top    = 20
canvas.Width  = 600
canvas.Height = 400

'------------------------------------------------------------------------
'  3) Handle the Paint event to draw shapes & the picture
'------------------------------------------------------------------------

Sub CanvasPaint(g as XGraphics) as Boolean
  Print str(g)
  ' Draw a blue diagonal line
  Print("PAINTING")
  g.clear()
  g.PenSize = 3
  g.DrawingColor = &c0000FF
  g.DrawLine(0, 0, canvas.Width, canvas.Height)
  
  ' Draw a red rectangle outline
  g.DrawingColor = &cFF0000
  g.DrawRect(50, 50, 150, 100)
  
  ' Fill a green oval
  g.DrawingColor = &c00FF00
  g.FillOval(250, 50, 100, 100)
  
  ' Draw some black text
  g.DrawingColor = &c000000
  g.FontName = "Arial"
  g.FontSize = 30
  g.DrawText("Hello, XCanvas!", 20, canvas.Height - 80)
  
  ' Draw our loaded picture in the lower right
  Dim picW As Integer = 100
  Dim picH As Integer = 100
  Dim px   As Integer = canvas.Width - picW - 10
  Dim py   As Integer = canvas.Height - picH - 10

  g.DrawPicture(pic, 0, 0, canvas.Width, canvas.height)
  return true
  
End Sub

Sub MouseDown(x as Integer, y as Integer)
  Print("MouseDown")
End Sub

Sub MouseUp(x as Integer, y as Integer)
  Print("MouseUp")
End Sub

Function MouseMove(x as Integer, y as Integer) as Boolean
  Print("x=" + str(x) + " y=" + str(y))
End Sub

Sub DoubleClick()
  Print("DoubleClicked")
End Sub

Sub TerminateApplication()
  Quit()
End Sub

AddHandler(canvas.Paint, AddressOf(CanvasPaint))
AddHandler(canvas.MouseDown, AddressOf(MouseDown))
AddHandler(canvas.MouseUp, AddressOf(MouseUp))
AddHandler(canvas.MouseMove, AddressOf(MouseMove))
AddHandler(canvas.DoubleClick, AddressOf(DoubleClick))
AddHandler(win.Closing, Addressof(TerminateApplication))

' Show the window and start the event loop
win.Show()
canvas.Invalidate()
'------------------------------------------------------------------------
'  4) Save a snapshot of our picture object back out to disk
'------------------------------------------------------------------------
pic.Save("C:\users\mcomb\desktop\canvas_snapshot.png")


while True
 DoEvents(1)
Wend

////EOF////

////test-cooperativethread.xs////

// -----------------------------------------------------------------------------
// Demo: Cooperative Threading in CrossBasic
// This script demonstrates how to create and run a cooperative thread using the
// XThread class. The thread yields control by calling Sleep inside its execution,
// enabling smooth cooperative multitasking with the main thread.
// -----------------------------------------------------------------------------

Print("Spinning-up 10 cooperative worker threads")

// Define the event handler for the thread's Run event.
// This subroutine will be executed when the thread starts running.
Sub Thread1Run()
  For i As Integer = 1 To 10
    // Output current loop iteration and thread state
    Print("Cooperative iteration " + Str(i) + " (Tag=" + thr1.Tag + ") ThreadState: " + Str(thr1.ThreadState))
    
    // Yield cooperatively by sleeping (non-blocking for main thread)
    thr1.Sleep(50, False)  // Sleep 50ms without blocking others
  Next

  // After finishing, notify and stop the thread
  Print("Cooperative thread finished.")
  thr1.Stop()
End Sub

// =================================================================================
// Main Program Execution
// =================================================================================

// Create a new cooperative thread instance
Dim thr1 As New XThread

// Tag the thread with an identifier (useful for debugging/logging)
thr1.Tag = "CoopDemo"

// Attach the OnRun event to the Thread1Run handler
AddHandler(thr1.OnRun, AddressOf(Thread1Run))

// Set the thread type to cooperative (0 = cooperative, 1 = preemptive)
thr1.Type = 0

// Start the thread
thr1.Start()

// Let the thread begin execution before proceeding
Sleep(50)

// Monitor the thread’s execution state
While thr1.ThreadState <> 4  // 4 = NotRunning
  DoEvents()  // Allow thread execution and GUI/event loop processing
Wend

// Final cleanup
Print("All done. Press Enter to exit.")
Sleep(1000)

////EOF////

////test-dictionary.xs////

// -----------------------------------------------------------------------------
// Demo: Custom Dictionary Class in CrossBasic
// This example defines a simple `Dictionary` class using parallel arrays to store
// string keys and variant values. It supports adding, updating, retrieving, and
// enumerating key-value pairs, emulating a basic associative array behavior.
// -----------------------------------------------------------------------------

//----------------------------------------------------------------
// Dictionary class – stores key-value pairs using dynamic arrays.
//----------------------------------------------------------------
Class Dictionary

  // Properties: parallel arrays for keys and values
  Var data() As String    // Array of keys
  Var vals() As Variant   // Array of corresponding values

  // Constructor: initializes empty arrays
  Sub Constructor()
    data = Array()        // Initialize key array
    vals = Array()        // Initialize value array
  End Sub

  // Count method: returns number of key-value pairs
  Function Count() As Integer
    Return data.Count()
  End Function

  // SetItem method: updates value if key exists, or adds a new pair
  Sub SetItem(key As String, value As Variant)
    Dim found As Boolean = False
    For i As Integer = 0 To self.Count() - 1
      If data(i) = key Then
        vals(i) = value   // Update existing key's value
        found = True
      End If
    Next

    If found = False Then
      data.Add(key)       // Add new key
      vals.Add(value)     // Add new value
    End If
  End Sub

  // GetItem method: returns value for a key, or "nil" if key not found
  Function GetItem(key As String) As String
    For i As Integer = 0 To data.Count() - 1
      If data(i) = key Then
        Return vals(i)
      End If
    Next
    Return "nil"
  End Function

  // Keys method: returns array of all keys
  Function Keys() As String
    Return data
  End Function

End Class

//----------------------------------------------------------------
// Test code for Dictionary
//----------------------------------------------------------------

// Create a new Dictionary instance which calls it's Constructor() from Dictionary() - no parameters passed to dictionary
Dim dt As New Dictionary

// Add several key–value pairs to the dictionary
dt.SetItem("name", "Alice")
dt.SetItem("age", 30)
dt.SetItem("city", "Wonderland")

// Retrieve and display specific values
Print("Name: " + dt.GetItem("name"))
Print("Age: " + Str(dt.GetItem("age")))
Print("City: " + dt.GetItem("city"))

// Print total number of entries
Print("Total items: " + Str(dt.Count()))

// Enumerate all keys and print their associated values
Dim keys() As String = dt.Keys()
For i As Integer = 0 To keys.Count() - 1
  Print("Key: " + keys(i) + ", Value: " + Str(dt.GetItem(keys(i))))
Next

Print("Dictionary test completed.")

////EOF////

////test-dt-sound-color.xs////

// -----------------------------------------------------------------------------
// Demo: Ode to Joy Melody Playback in CrossBasic
// This script demonstrates generating sound using `Beep(frequency, duration)`
// while simultaneously printing colorful outputs with `PrintColor`. It plays the
// melody for "Ode to Joy" across 4 verses and randomly changes the console text color.
// -----------------------------------------------------------------------------

// Verse 1 - Frequencies (in Hz) and durations (in ms)
Var frequencies() As Integer = Array(330, 330, 349, 392, 392, 349, 330, 294, 262, 262, 294, 330, 330, 294, 294)
Var durations()   As Integer = Array(400, 400, 600, 600, 600, 600, 600, 600, 600, 400, 400, 600, 600, 600, 900)

// Verse 2/4 - Slight variation to play later again
Var frequencies2() As Integer = Array(330, 330, 349, 392, 392, 349, 330, 294, 262, 262, 294, 330, 294, 262, 262)
Var durations2()   As Integer = Array(400, 400, 600, 600, 600, 600, 600, 600, 600, 400, 400, 600, 600, 600, 900)

// Verse 3 - Adds a melodic bridge
Var frequencies3() As Integer = Array(294, 294, 330, 262, 294, 330, 349, 330, 262, 294, 330, 349, 330, 294, 262, 294, 196)
Var durations3()   As Integer = Array(400, 400, 600, 600, 600, 600, 600, 600, 400, 400, 600, 600, 600, 600, 900, 600, 900)

// Subroutine: Plays a verse with given frequency and duration arrays
Sub PlayVerse(freqs As Variant, durs As Variant)
  For i As Integer = 0 To freqs.Count() - 1
    // Play each note with its corresponding duration
    Beep(freqs(i), durs(i))

    // Generate a random RGB color and convert it to HEX
    Var NR As New Random
    Var r As Integer = NR.InRange(0, 255)
    Var g As Integer = NR.InRange(0, 255)
    Var b As Integer = NR.InRange(0, 255)
    Var clr As String = RGBtoHEX(r, g, b)

    // Display time-stamped color feedback for each note
    PrintColor(clr + " ", clr)
    Print(GetCurrentDate() + " - " + GetCurrentTime())

    // Brief pause between notes
    Sleep(100)
  Next
End Sub

// Start melody playback
Print("Turn your volume up! Ode to Joy!")
PlayVerse(frequencies, durations)
PlayVerse(frequencies2, durations2)
PlayVerse(frequencies3, durations3)
PlayVerse(frequencies2, durations2)  // Repeat verse 2 for ending

////EOF////

////test-extends.xs////

Module MathUp
  Public Function Multiply(Extends a As Integer, b As Integer) As Integer
    Return a * b
  End Function
End Module

var myint as Integer = 13
var output as Integer = myint.Multiply(2) 'output should now equal 26
print(str(output))
////EOF////

////test-gotolabel.xs////

// -----------------------------------------------------------------------------
// Demo: Simulating Meal Service with Nested Loops and Goto in CrossBasic
// This script iterates through a set of people and serves them meals across
// different times of day. It demonstrates string padding, formatting,
// arithmetic calculations, and use of Goto for custom loop control flow.
// -----------------------------------------------------------------------------

// Initialize counters and data arrays
Dim z As Integer = 0  // Outer loop counter
Dim arrPeople() As String = Array("Sally", "John", "Jane", "Robert", "Mitchel")
Dim totalPeople As Integer = arrPeople.Count()

Dim arrMeal() As String = Array("Breakfast", "Lunch", "Dinner")
Dim totalIterations As Integer = arrMeal.Count()

Dim mealTimeofDay As Integer = -1  // Will start at 0 on first loop
Dim costPerMeal As Double = 6.93
Dim totalMeals As Integer  // Counter for total meals served

// Function: Returns a pipe character divider between columns
Function Divider() As String
  Return " | "
End Function

// Function: Pads a string on the right to ensure fixed-width columns
Function PadRight(text As String, width As Integer) As String
  If Length(text) < width Then
    Return text + Space(width - Length(text))
  Else
    Return text
  End If
End Function

// Function: Computes meal number based on outer and inner loop counters
Function ServeAMeal(mainIt As Integer, loopIt As Integer) As Integer
  Return mainIt * totalPeople + loopIt
End Function

// Main program logic using Goto for loop simulation
Beginning:
  mealTimeofDay = mealTimeofDay + 1  // Increment meal time index

  // Serve a meal to each person in the current time of day
  For I As Integer = 1 To totalPeople
    totalMeals = ServeAMeal(z, I)  // Compute total meals served so far

    // Print a formatted row of meal data
    Print( _
      PadRight("Meal - " + arrMeal(mealTimeofDay), 20) + Divider() + _
      PadRight(arrPeople(I - 1), 15) + Divider() + _
      "Total Meals Served = " + Str(totalMeals) _
    )
  Next I

  z = z + 1
  If z = totalIterations Then
    Goto Done  // Exit loop if all meals are served
  End If

  Goto Beginning  // Repeat for next meal time

// Final summary output
Done:
  Print("")
  Print("Total Meals Served = " + Str(totalMeals) + _
        " at $" + Format(costPerMeal, "#0.00") + _
        " for a total of: $" + Format(costPerMeal * totalMeals, "#0.00"))
  Print("All Done!")

////EOF////

////test-ifconditions.xs////

// -----------------------------------------------------------------------------
// Demo: Conditional Logic and Comparison Tests in CrossBasic
// This script tests a variety of conditional expressions, including:
// - Integer, Double, and Boolean comparisons
// - Object equality checks
// - Color literal comparison
// -----------------------------------------------------------------------------

// Define color variables for literal comparison
Dim v As Color = &c00FF00
Dim b As Color = &c00FFF0

// Define booleans
Dim b1 As Boolean = True
Dim b2 As Boolean = False

// Define integers
Dim a As Integer = 20
Dim b As Integer = 5

// Define a float and an integer for comparison
Dim l As Double = 2.00
Dim t As Integer = 2

// Float and integer equality
If l = t Then 
  Print("l is 2.00 and t is 2. They are equal")
End If

// Check if a equals 20
If a = 20 Then 
  Print("A = 20 - test passed.")
End If

// Integer/Boolean combination and NOT logic
If a / 5 = 4 And Not b1 Then
  Print("Pass 1")
Else
  Print("Pass 2")
End If

// Boolean inequality check
If b1 <> b2 Then 
  Print("True is not equal to False")
End If

// Multi-condition using AND
If (b1 <> b2) And l = 2 And t = 2.00 Then 
  Print("These all pass the IF conditions.")
End If

// Multi-condition using OR
If (b1 = b2) Or (l = 2 And t = 2.00) Then 
  Print("These all pass the IF conditions.")
End If

// Color literal comparison (equality)
If v = v Then 
  Print(Str(v) + " = " + Str(&c00FFF0))  // Always true, but showing usage
Else
  Print("v = " + Str(v))
  Print("V is not equal to V")
End If

// Object reference comparison
Dim x As New XScreen
Dim y As New XScreen

// Compare an object to itself (reference equality)
If x = x Then
  Print("x = x")
Else
  Print("x <> x")
End If

// Compare two distinct instances
If x <> y Then 
  Print("X is not equal to Y")
End If

////EOF////

////test-iif.xs////

Var v As Variant
v = 42
Print IIF(v = 42, "forty-two", "no match")  // prints "forty-two"

v = "hello"
Print IIF(v = "hello", "greeting", "??")   // prints "greeting"

Var c As Color = &cFF0000
Print IIF(c = &cFF0000, "red", "not red")  // prints "red"

Var t As String = "test1"
Print IIF(t = "test1", "yes", "no")  // prints “yes”

Print IIF(5 > 3, "yes", "no")   // prints "yes"

////EOF////

////test-input.xs////

// -----------------------------------------------------------------------------
// Demo: Reverse Text Input in CrossBasic
// This script prompts the user to enter text. It reverses the input and prints it.
// Typing `exit()` exits the program gracefully.
// -----------------------------------------------------------------------------

// Declare user input variable
Var userInput As String

// Prompt user
Print("Enter some text, press 'Enter.' Input 'exit()' to quit")

// Loop until user types 'exit()'
While userInput <> "exit()"

  // Get user input from console
  userInput = Input()

  // Exit condition check
  If userInput = "exit()" Then 
    Return 0
  End If

  // Split input into character array
  Var y() As String = Split(userInput, "")

  // Declare a variable to hold reversed string
  Var t As String

  // Reverse the characters in the array and concatenate
  For i As Integer = y.LastIndex() DownTo 0
    t = t + y(i)
  Next

  // Output reversed string
  Print("Your text backwards: " + t)

Wend

////EOF////

////test-jsonarrayhelpers.xs////

// -----------------------------------------------------------------------------
// Demo: JSONItem as an Array in CrossBasic
// This script demonstrates using a `JSONItem` to represent and manipulate
// a JSON array. It includes adding items, inserting at a specific index,
// iterating through values, and removing elements.
// -----------------------------------------------------------------------------

// Create a new JSONItem and treat it as an array
Var arr As New JSONItem

// Add items to the JSON array
arr.Add("Apple")
arr.Add("Banana")
arr.Add("Cherry")

// Insert "Blueberry" at index 1 (between Apple and Banana)
arr.AddAt(1, "Blueberry")

// Print the full array as JSON
Print("Array JSONItem: " + arr.ToString)

// Iterate through the JSON array and print each element
For i As Integer = 0 To arr.Count - 1
  Print("Element " + Str(i) + ": " + arr.ValueAt(i))
Next i

// Remove the element at index 2 (Banana gets removed)
arr.RemoveAt(2)

// Show the updated array
Print("After RemoveAt(2): " + arr.ToString)

// Clean up the JSONItem instance
arr.Close()

////EOF////

////test-listbox.xs////

// Demo_AddRows.xojo
// A simple CrossBasic/XWindow demo:
// - Create a window
// - Place a 2‑column listbox and a button
// - On each button click, add a new row

// Create the main window
Var win As New XWindow
win.Width  = 600
win.Height = 800
win.Caption = "Listbox + Button Demo"

// Create the listbox
Var lb As New XListbox
lb.Width = 350
lb.height = 200
lb.left = 100
lb.top = 100
lb.ColumnCount    = 2
lb.ColumnWidths   = "50%,50%"
lb.RowHeight      = 20
lb.HasHeader      = True
lb.Visible        = True
lb.FontName       = "Arial"
lb.FontSize       = 16
'lb.Hasborder = true
var c as Color = &c0000FF
lb.TextColor      = c
lb.Parent         = win.Handle


// Set up two column headers
lb.AddRow("Item")   // use header row as simple workaround

// Create the button
Var btn As New XButton
btn.Width    = 80
btn.Height   = 30
btn.Left     = 10
btn.Top      = 10
btn.Parent   = win.Handle
btn.Caption  = "Add Row"


var txt As New XTextField
txt.Width = 200
txt.height = 30
txt.top = 10
txt.left = 100
txt.Parent = win.handle
txt.FontName = "Arial"
txt.FontSize = 20
txt.TextColor = &cFF0000
' // Row‑counter
 Dim rowCount As Integer = 1

' // Button callback: adds a new row "Row N" / "Value N"
Function OnAddRow()
  lb.AddRow("Row " + Str(rowCount))
  rowCount += 1 'rowCount + 1
  win.Title = str(lb.SelectedRow)
End Function

sub rowselected()
    txt.Text = lb.CellTextAt(lb.SelectedRow, 0)
end sub


Sub AppQuit()
  Quit()
End Sub

// Show the window
win.Show()

' // Wire up the button’s pressed event
 AddHandler(btn.Pressed, AddressOf(OnAddRow))
 AddHandler(lb.SelectionChanged, AddressOf(rowselected))
 AddHandler(win.closing, AddressOf(AppQuit))

// Event loop
While True
  DoEvents(1)
Wend

////EOF////

////test-module.xs////

// -----------------------------------------------------------------------------
// Demo: Using Modules, Classes, and Built-in Functions in CrossBasic
// This script demonstrates basic language features including:
// - Module definitions and usage
// - Class declaration with properties and methods
// - Control structures (If, For)
// - Color literals, math functions, and randomness
// -----------------------------------------------------------------------------

// Module: MathUtilities
Module MathUtilities
  // Function to multiply two integers
  Public Function Multiply(a As Integer, b As Integer) As Integer
    Return a * b
  End Function
End Module

// Class: Person
Class Person
  Var Name As String  // Property to store person's name

  // Constructor: initializes the Name property
  Sub Constructor(newName As String)
    Name = newName
  End Sub

  // Method: prints a greeting to the console
  Public Sub Greet()
    Print("Hello, my name is " + Name)
  End Sub
End Class

// -----------------------------------------------------------------------------
// Main Script Execution
// -----------------------------------------------------------------------------

// Define and use variables
Dim x As Integer = 5
Dim y As Integer = 10

// Output sum of two numbers
Print("Sum: " + Str(x + y))

// Conditional logic test
If x < y Then
  Print("x is less than y")
Else
  Print("x is not less than y")
End If

// For loop from 1 to 3
For i = 1 To 3
  Print("Loop: " + Str(i))
Next

// Color literal assignment and output
Dim purple As Color = &c800080
Print("Color literal for purple: " + Str(purple))

// Use of built-in math functions
Dim result As Double = Pow(2, 3) + Sqrt(16)  // 8 + 4 = 12
Print("Result: " + Str(result))

// Use Random class to generate a number between 1 and 100
Dim rndInstance As New Random
Print("Random Number (1 to 100): " + Str(rndInstance.InRange(1, 100)))

// Use module-defined function to multiply two integers
Print("Multiply 6 * 7 = " + Str(MathUtilities.Multiply(6, 7)))

// Create and use an instance of the Person class
Dim p As New Person("Alice")
p.Greet()               // Output greeting

////EOF////

////test-not.xs////

Dim flag As Boolean = true
'Not True = False / Not False = True
If flag Then
  Print("Flag is false")
Else
  Print("Flag is true")
End If
////EOF////

////test-ollamachat.xs////

// -----------------------------------------------------------------------------
// Demo: Pirate Roleplay Chat with LLM using Ollama in CrossBasic
// This interactive chatbot connects to a local Ollama server using the LLMConnection
// plugin. It plays the role of "Blacksail", a pirate character, and stays in-character
// throughout the session. Enter 'exit()' to end the conversation.
// -----------------------------------------------------------------------------

// Configuration for the LLM
Dim host As String = "http://127.0.0.1:11434/v1/"        // Ollama local server URL
Dim apiKey As String = ""                                // Optional for commercial APIs
Dim organization As String = ""                          // Optional for commercial APIs
Dim model As String = "llama3.2:latest"                  // Model to be used for completions

// Other variables
Dim prompt As String
Dim maxTokens As Integer = 256
Dim temperature As Double = 0.7
Dim userInput As String

// Create a new LLMConnection instance
Dim llm As New LLMConnection

// Assign server and credentials (Ollama doesn't require API key/org)
llm.APIHost = host
llm.APIKey = apiKey
llm.Organization = organization

// Define the system-level prompt to guide the model's behavior
Dim systemPrompt As String = "Role: You are a friendly pirate assistant named Blacksail. Argh Matey!!! " + _
        "You speak like a pirate, act like a pirate, and never break character. You only know the pirate life, " + _
        "anything else is out of your realm of knowledge." + EndOfLine

// Initial greeting
PrintColorMarkdown("## Welcome to Ollama Chat - Pirate Style! Get ready to speak with a pirate. Enter 'exit()' at any time to quit." + EndOfLine)

// Initialize the conversation prompt with the system instructions
prompt = systemPrompt

// Start interactive chat loop
While True
    PrintColorMarkdown("### User:")
    
    // Read user input
    userInput = Input()
    
    // Exit condition
    If userInput = "exit()" Then 
        Return 0
    End If

    // Append user input to the ongoing prompt history
    prompt = prompt + "user: " + userInput + EndOfLine

    // Send the prompt to the model and get the response
    Dim response As String = llm.CreateCompletion(model, prompt, maxTokens, temperature)

    // Display response in pirate voice
    PrintColorMarkdown("**Blacksail:** " + response)

    // Append assistant response to prompt for continuity
    prompt = prompt + "assistant: " + response + EndOfLine
Wend

// Close the connection (never reached in current loop, but good practice)
llm.Close()

////EOF////

////test-pair.xs////

// -----------------------------------------------------------------------------
// Demo: Overloaded Constructors and Variant Arrays in CrossBasic
// This script demonstrates class overloading, instance property manipulation,
// and storing class instances inside Variant arrays for polymorphic handling.
// -----------------------------------------------------------------------------

// Define a class representing a pair of values
Class Pair
  // Properties for left and right values
  Dim LeftValue As Variant
  Dim RightValue As Variant

  // Default constructor (does nothing by default)
  Sub Constructor()
    // Main Constructor
  End Sub

  // Overloaded constructor to initialize left and right values directly
  Sub Constructor(leftValue As Variant, rightValue As Variant)
    Self.LeftValue = leftValue
    Self.RightValue = rightValue
  End Sub
End Class

// Create a Pair instance and assign values manually
Var p As New Pair
p.LeftValue = "hello "
p.RightValue = "world."
Print(p.LeftValue + p.RightValue)  // Output: hello world.

// Create another Pair using the overloaded constructor
Var c As New Pair
c.Constructor(30, 40)
Print(Str(c.LeftValue))   // Output: 30
Print(Str(c.RightValue))  // Output: 40

// Store both Pair instances in a Variant array
Var vpairs() As Variant
vpairs.Add(p)
vpairs.Add(c)

// Access properties through the Variant array (auto-unboxing)
Print(vpairs(0).LeftValue)  // Output: hello 

////EOF////

////test-preemptivethread.xs////

// -----------------------------------------------------------------------------
// Demo: Preemptive Threading in CrossBasic
// This script demonstrates how to create and run a preemptive thread using the
// `XThread` class. Unlike cooperative threads, preemptive threads can interrupt
// other threads and run independently without yielding manually.
// -----------------------------------------------------------------------------

Print("Spinning-up 10 separate preemptive worker threads")

// Define the event handler for the thread's Run event.
// This subroutine simulates CPU work for 10 iterations.
Sub Thread2Run()
  For i As Integer = 1 To 10
    // Output current loop iteration and thread state
    Print("Preemptive iteration " + Str(i) + " (Tag=" + thr2.Tag + ") ThreadState: " + Str(thr2.ThreadState))

    // Simulate CPU-bound task
    Dim sum As Integer = 0
    For j As Integer = 1 To 500
      sum = sum + j
    Next
  Next

  // Notify that the thread has finished
  Print("Preemptive thread finished.")
End Sub

// =================================================================================
// Main Program Execution
// =================================================================================

// Create a new instance of XThread for preemptive execution
Dim thr2 As New XThread

// Set a descriptive tag (useful for logging/debugging)
thr2.Tag = "PreemptDemo"

// Assign the event handler for OnRun
AddHandler(thr2.OnRun, AddressOf(Thread2Run))

// Set the thread type to 1 (preemptive)
thr2.Type = 1

// Start the thread
thr2.Start()

// Since this is a preemptive thread, there's no need to Sleep
// It runs on a separate thread pool and can interrupt other threads

// Keep the application running until the thread exits
While thr2.ThreadState <> 4  // 4 = NotRunning
  DoEvents()
Wend

// Final message after thread completes
Print("All done. Press Enter to exit.")
Sleep(1000)

////EOF////

////test-speak.xs////

// -----------------------------------------------------------------------------
// Demo: Speech Synthesis in CrossBasic
// This simple example demonstrates using the built-in `Speak()` function to
// generate speech output from text.
// -----------------------------------------------------------------------------

// Speak the given text aloud using the system’s text-to-speech engine
Speak("Hello world! This is a CrossBasic speech demo.")

////EOF////

////test-webview.xs////

// XWebViewDemo.cb
// A simple CrossBasic demo using the XWebView plugin:
// – Shows a window with Back, Forward, Reload, URL field and Go button
// – Embeds a WebView filling most of the window

// Create the main window
Var win As New XWindow
win.Title = "XWebView Demo"
win.HasMaximizeButton = False
win.Resizable = False
win.Width   = 1200
win.Height  = 1000
AddHandler(win.Closing, AddressOf(AppClosing))

Sub AppClosing()
	Quit()
End Sub

// Create the WebView control
Var webview As New XWebView
webview.Parent = win.Handle
webview.Left   = 0
webview.Top    = 60
webview.Width  = win.Width - 6
webview.Height = win.Height - 89



// Back button
Var btnBack As New XButton
btnBack.Parent  = win.Handle
btnBack.FontName = "Arial"
btnBack.FontSize = 16
btnBack.Caption = "<"
btnBack.Left    = 10
btnBack.Top     = 10
btnBack.Width   = 32
btnBack.Height  = 32
AddHandler(btnBack.Pressed, AddressOf(GoBack))

Sub GoBack()
	Print("GoBack Pressed")
	webview.GoBack()
End Sub

// Forward button
Var btnForward As New XButton
btnForward.Parent  = win.Handle
btnForward.FontName = "Arial"
btnForward.FontSize = 16
btnForward.Caption = ">"
btnForward.Left    = 50
btnForward.Top     = 10
btnForward.Width   = 32
btnForward.Height  = 32

AddHandler(btnForward.Pressed, AddressOf(GoForward))

Sub GoForward()
	Print("GoForward Pressed")
	webview.GoForward()
End Sub

// Reload button
Var btnReload As New XButton
btnReload.Parent  = win.Handle
btnReload.FontName = "Arial"
btnReload.FontSize = 16
btnReload.Caption = "@"
btnReload.Left    = 90
btnReload.Top     = 10
btnReload.Width   = 32
btnReload.Height  = 32
AddHandler(btnReload.Pressed, AddressOf(RefreshWebView))

Sub RefreshWebView()
	Print("Refresh Pressed")
	webview.Refresh()
End Sub

// URL text field
Var txtURL As New XTextField
txtURL.Parent = win.Handle
txtURL.FontName = "Arial"
txtURL.FontSize = 20
txtURL.Left   = 130
txtURL.Top    = 10
txtURL.Width  = win.Width - 260
txtURL.Height = 32
txtURL.Text   = "https://ide.crossbasic.com"
txtURL.TextColor = &cFFFFFF

// Go button
Var btnGo As New XButton
btnGo.Parent  = win.Handle
btnGo.FontName = "Arial"
btnGo.FontSize = 16
btnGo.Caption = "Go"
btnGo.Left    = win.Width - 120
btnGo.Top     = 10
btnGo.Width   = 32
btnGo.Height  = 32
AddHandler(btnGo.Pressed, AddressOf(LoadPage))
  
Sub LoadPage()
	Print("Load Page Pressed")
	webview.LoadURL(txtURL.Text)
End Sub

// JS button
Var btnJS As New XButton
btnJS.Parent  = win.Handle
btnJS.FontName = "Arial"
btnJS.FontSize = 16
btnJS.Caption = "JS"
btnJS.Left    = win.Width - 60
btnJS.Top     = 10
btnJS.Width   = 32
btnJS.Height  = 32
AddHandler(btnJS.Pressed, AddressOf(RunJS))

Var jsFunction As String = "function calculateExpression(expression){try{if(!/^[0-9+\-*/().\s^%]+$/.test(expression)){throw new Error('Invalid characters in expression.');}expression=expression.replace(/\^/g,'**');const result=new Function(`return (${expression});`)();if(isNaN(result)||!isFinite(result)){throw new Error('Invalid result.');}return result;}catch(error){return `Error: ${error.message}`;}}"


Sub RunJS()
	' TODO: ExecuteJavaScriptSync is currently binding and causing a crash.
	'var content as String = webview.ExecuteJavascriptSync("document.title")
		'jsFunction + "calculateExpression('3 + 4 * 2');")
	'print(content)
	webview.ExecuteJavascript(jsFunction + "alert('3 + 4 *2 = ' + calculateExpression('3 + 4 * 2'));")

End Sub

// Show the window modally
win.Show()

webview.LoadURL(txtURL.Text)

While True
	DoEvents(1)
Wend
////EOF////

////test-windowev.xs////

// -----------------------------------------------------------------------------
// Demo: GUI Application with Buttons, Timer, TextArea, and Beep in CrossBasic
// This example showcases creation of a basic GUI window using CrossBasic’s native
// `XWindow`, `XButton`, `XTextArea`, and `XTextField` controls. It handles events
// like button presses, window lifecycle, timer updates, and input text changes.
// -----------------------------------------------------------------------------

// Define some parameters
Dim TotalCount As Integer = 0
Dim red As Color = &cFF0000    // Red
Dim green As Color = &c00FF00  // Green
Dim white As Color = &cFFFFFF  // White
Dim blue As Color = &c0000FF   // Blue

// Get screen information and main display
Dim src As New XScreen
Dim disp As XScreen = src.DisplayAt(0)  // Main display reference

// Create main window
Dim win As New XWindow
win.ViewType = 0
win.Title = "My First GUI Application"
win.Height = 500
win.Width = 515
win.BackgroundColor = &c0B0B0B
win.Resizable = False
win.HasCloseButton = True
win.HasMinimizeButton = True
win.HasMaximizeButton = False

// Center window on screen
win.Left = (disp.Width / 2) - (win.Width / 2)
win.Top = (disp.Height / 2) - (win.Height / 2)

// Create and configure buttons
Dim btn As New XButton
// Assign parent window for controls
btn.Parent = win.Handle
btn.Left = 50
btn.Top = 50
btn.Width = 100
btn.Height = 30

Dim btn2 As New XButton
// Assign parent window for controls
btn2.Parent = win.Handle
btn2.Left = 170
btn2.Top = 50
btn2.Width = 200
btn2.Height = 30

// Create and configure text field
Dim tField1 as New XTextField
// Assign parent window for controls
tField1.Parent = win.Handle
tField1.Left = 50
tField1.Top = 10
tField1.Height = 30
tField1.Width = 400

// Create and configure text area
Dim txtArea1 as New XTextArea
// Assign parent window for controls
txtArea1.Parent = win.Handle
txtArea1.Left = 50
txtArea1.Top = 150
txtArea1.Height = 250
txtArea1.Width = 400


' // Assign parent window for controls
' btn.Parent = win.Handle
' btn2.Parent = win.Handle
' txtArea1.Parent = win.Handle
' tField1.Parent = win.Handle

// Visual Properties must be set once attached to the parent
btn.Caption = "🙂 Click Me"
btn2.Caption = "Quit Application"
btn.visible = True
btn2.visible = True

btn.FontName = "Calibri"
btn.FontSize = 16
btn.HasBorder = True

btn2.FontName = "Arial"
btn2.FontSize = 12
btn2.Bold = True
btn2.Italic = True
btn2.Underline = True
btn2.HasBorder = True

tField1.FontName = "Calibri"
tField1.FontSize = 16
tField1.Bold = True
tField1.TextColor = Green
tField1.visible = True

txtArea1.FontName = "Calibri"
txtArea1.FontSize = 18
txtArea1.TextColor = white
txtArea1.visible = True


// Register event handlers
AddHandler(win.Opening, AddressOf(WindowOpening))
AddHandler(win.Closing, AddressOf(WindowClosed))
AddHandler(btn.Pressed, AddressOf(ButtonPressed))
AddHandler(btn2.Pressed, AddressOf(ButtonPressed2))
AddHandler(tField1.TextChanged, AddressOf(TField1TextChanged))


// Create and configure a repeating timer
Dim tmr As New XTimer
tmr.Period = 1        // 1 ms interval
tmr.RunMode = 2       // Multiple firing
AddHandler(tmr.Action, AddressOf(TimerFired))

// Show the window
win.Show()

// Main event loop
While True
  DoEvents(1)
Wend

// Event: Window opening
Sub WindowOpening()
  MessageBox("Welcome!")
End Sub

// Event: Window closed
Sub WindowClosed()
  MessageBox("Window was closed! Goodbye cruel world!")
  Quit()
End Sub

// Event: First button pressed (toggle timer and button state)
Sub ButtonPressed()
  If btn2.Enabled Then
    tmr.Enabled = False
    btn2.Enabled = False
    txtArea1.TextColor = Red
    txtArea1.Text = "Quit Button Disabled"
  Else
    btn2.Enabled = True
    tmr.Enabled = True
    txtArea1.TextColor = Green
    txtArea1.Text = "Quit Button Enabled"
  End If
End Sub

// Event: Second button pressed (quit app)
Sub ButtonPressed2()
  Quit()
End Sub

// Event: Timer — update window title and log counter
Sub TimerFired()
  win.Title = "Timer fired at " + GetCurrentTime() + " TotalCount: " + Str(TotalCount)
  TotalCount = TotalCount + 1
  txtArea1.AddText(Str(TotalCount) + EndOfLine)
  txtArea1.ScrollPosition = 999999
End Sub

// Event: Text field content changed — reflect and optionally beep
Sub TField1TextChanged(txtData As String)
  txtArea1.TextColor = White
  txtArea1.Text = txtData
  Dim freq As String = txtArea1.Text
  If IsNumeric(freq) Then
    Beep(Val(freq), 200)
  End If
End Sub

////EOF////

////test-xaml.xs////

// XamlContainerDemo.cb
// A simple CrossBasic demo using the XamlContainer plugin:
// – Shows a window with a XAML Button loaded at runtime
// – Hooks the Button’s Click via AddXamlEvent

// Create the main window
Var win As New XWindow
win.Title            = "XAML Container Demo"
win.HasMaximizeButton = False
win.Resizable        = False
win.Width            = 600
win.Height           = 400
AddHandler(win.Closing, AddressOf(AppClosing))

Sub AppClosing()
  Quit()
End Sub

' // Create a label to describe the demo
' Var lbl As New XLabel
' lbl.Parent   = win.Handle
' lbl.Left     = 20
' lbl.Top      = 20
' lbl.Width    = 300
' lbl.Height   = 24
' lbl.Text     = "Below is a XAML‑hosted button:"
' lbl.FontSize = 14

// Create the XAML container
Var xc As New XamlContainer
xc.Parent = win.Handle
xc.Left   = 20
xc.Top    = 60
xc.Width  = win.Width - 40
xc.Height = win.Height - 100

// Load XAML with a named Button in the center
Var xamlMarkup As String = _
  "<Grid xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation' " + _
        "HorizontalAlignment='Stretch' VerticalAlignment='Stretch'>" + _
    "<Button x:Name='MyButton' Content='Press Me' Width='120' Height='40' " + _
            "HorizontalAlignment='Center' VerticalAlignment='Center'/>" + _
  "</Grid>"
xc.LoadXAML(xamlMarkup)

// Hook its Click dynamically
xc.AddXamlEvent("MyButton", "Click", AddressOf(OnMyBtnClick))

Sub OnMyBtnClick()
  MessageBox("You clicked the XAML button!")
End Sub

// Show the window and run the event loop
win.Show()

While True
  DoEvents()
  Sleep(10)
Wend

////EOF////

////test-xmenuitem.xs////

////menu-demo.xs////

// -----------------------------------------------------------------------------
// Demo: Menu Bar and About Dialog in CrossBasic
// It shows how to create a menu bar with File and Help menus, respond to menu
// item selections, and perform actions like printing to the console or showing
// an About dialog.
// -----------------------------------------------------------------------------

// Create the main window
Var win As New XWindow
win.Width              = 400
win.Height             = 300
win.Title              = "Menu Demo"
win.Resizable          = False
win.HasCloseButton     = True
win.HasMinimizeButton  = True
win.HasMaximizeButton  = False
win.HasFullScreenButton = False
win.HasTitleBar        = True

AddHandler(win.Closing, AddressOf(AppClosing))

Sub AppClosing()
  Quit()
End Sub

// Create the menu bar
Var menuBar As New XMenuBar
menuBar.Parent = win.Handle

// ——— File Menu ———
Var fileMenu As New XMenuItem
fileMenu.Parent  = menuBar.Handle
fileMenu.Caption = "File"

  // New...
  Var newItem As New XMenuItem
  newItem.Parent  = fileMenu.Handle
  newItem.Caption = "New"
  AddHandler(newItem.Pressed, AddressOf(OnNew))

  // Open...
  Var openItem As New XMenuItem
  openItem.Parent  = fileMenu.Handle
  openItem.Caption = "Open"
  AddHandler(openItem.Pressed, AddressOf(OnOpen))

  // Separator
  Var sep1 As New XMenuItem
  sep1.Parent       = fileMenu.Handle
  sep1.IsSeparator  = True

  // Exit
  Var exitItem As New XMenuItem
  exitItem.Parent  = fileMenu.Handle
  exitItem.Caption = "Exit"
  AddHandler(exitItem.Pressed, AddressOf(OnExit))

// ——— Help Menu ———
Var helpMenu As New XMenuItem
helpMenu.Parent  = menuBar.Handle
helpMenu.Caption = "Help"

  // About
  Var aboutItem As New XMenuItem
  aboutItem.Parent  = helpMenu.Handle
  aboutItem.Caption = "About"
  AddHandler(aboutItem.Pressed, AddressOf(OnAbout))

// Show the window
win.Show()
While True
  DoEvents(10)
Wend

// ——— Event Handlers ———
Sub OnNew()
    MessageBox("Hello")
  Print("File -> New selected")
End Sub

Sub OnOpen()
  Print("File -> Open selected")
End Sub

Sub OnExit()
  Quit()
End Sub

Sub OnAbout()
  MessageBox("CrossBasic Menu Demo" + EndOfLine + "Version 1.0")
End Sub


////EOF////

////test-xpicture.xs////

Dim p as new XPicture(1, 1, 200, 200, 32,0,0,0,0,0)

Print("XPicture P was created:" + str(p.Width) + ", " + str(p.Height))
////EOF////

////test-xscreen.xs////

// -----------------------------------------------------------------------------
// Demo: Multi-Display Enumeration with XScreen in CrossBasic
// This script demonstrates how to query information about all connected displays
// using the `XScreen` class. It shows resolution and display descriptions.
// -----------------------------------------------------------------------------

// Create a new XScreen instance to access display information
Dim nx As New XScreen

// Get the last display index (usually DisplayCount - 1)
Dim idx As Integer = nx.DisplayCount - 1

// Access the primary (main) display
Dim disp As XScreen = nx.DisplayAt(0)  // Index 0 = main display

// Show resolution of the primary display
MessageBox("Main is " + Str(disp.Width) + "x" + Str(disp.Height))

// Loop through all displays and show their descriptions
For i As Integer = 0 To nx.LastDisplayIndex
  Dim d As XScreen = nx.DisplayAt(i)
  MessageBox("Display " + Str(i) + ": " + d.Description)
Next i

////EOF////

////test-xscreen2.xs////

'' =============================================================================
'' A full demonstration of all XScreen plugin features.
'' Author: Matthew A. Combatti – Simulanics / Xojo Developers Studio
''
'' This script displays full screen and monitor info for all connected displays.
'' It includes display count, main screen properties, and a loop to list all
'' screen attributes like resolution, color depth, scale, and work area bounds.
'' =============================================================================

' Create a root screen instance to interact with display APIs
Dim root As New XScreen

' ------------------------------------------------------------------------
' 1) Print global screen metrics: number of displays and last display index
' ------------------------------------------------------------------------
Print("=== XScreen Global Info ===")
Print("DisplayCount:     " + Str(root.DisplayCount))
Print("LastDisplayIndex: " + Str(root.LastDisplayIndex))
Print("")

' ------------------------------------------------------------------------
' 2) Show popup with details about the primary display (index 0)
' ------------------------------------------------------------------------
Dim main As XScreen = root.DisplayAt(0)
MessageBox("Main Display:" + EndOfLine + _
           "  Name:        " + main.Name + EndOfLine + _
           "  Resolution:  " + Str(main.Width) + " x " + Str(main.Height) + EndOfLine + _
           "  ScaleFactor: " + Str(main.ScaleFactor) + EndOfLine + _
           "  ColorDepth:  " + Str(main.ColorDepth))

Print("")  ' Separate output visually in console

' ------------------------------------------------------------------------
' 3) Loop through all connected displays and print their properties
' ------------------------------------------------------------------------
For i As Integer = 0 To root.LastDisplayIndex
  Dim scr As XScreen = root.DisplayAt(i)
  Print("=== Display Index " + Str(i) + " ===")
  Print(" Name:                 " + scr.Name)
  Print(" Monitor Device:       " + scr.ScreenDisplayMonitor)
  Print(" Friendly Description: " + scr.Description)
  Print(" Fullscreen Width:     " + Str(scr.Width))
  Print(" Fullscreen Height:    " + Str(scr.Height))
  Print(" ScaleFactor:          " + Str(scr.ScaleFactor))
  Print(" ColorDepth:           " + Str(scr.ColorDepth))
  Print(" WorkArea Left:        " + Str(scr.AvailableLeft))
  Print(" WorkArea Top:         " + Str(scr.AvailableTop))
  Print(" WorkArea Width:       " + Str(scr.AvailableWidth))
  Print(" WorkArea Height:      " + Str(scr.AvailableHeight))
  Print("")  ' Add spacing between displays
Next

' Final console message
Print("Demo complete.")

////EOF////

////test.xs////

// -----------------------------------------------------------------------------
// CrossBasic Demonstration Script
// This comprehensive demo showcases various CrossBasic/XojoScript features:
// - Variable declarations and control structures
// - Built-in functions (math, string, array, flow control)
// - Class and module usage
// - Plugin interaction and UTF-8 support
// - SQLite access, shell execution, cryptography
// - JSON manipulation, LLM usage, and markdown conversion
// -----------------------------------------------------------------------------

// file: test.txt
// comment test

// Store starting ticks for timing runtime
Dim StartTime As Double
StartTime = ticks

// Print tick time
print(str(StartTime))
print(StartTime.toString)
print(starttime.toString)

// Factorial calculation (uses plugin if available)
Dim f As Integer = factorial(6)
print("Factorial of 6 is " + str(f))

// Integer array tests
Dim x() As Integer
x.add(2)
x.add(25)
x.add(336)
print(str(x.indexof(336)))
print(str(x.indexof(214)))

// Simple For loop from 0 to 100
For i As Integer = 0 To 100
    print("Loop: " + str(i))
Next

// Simple print
print("Hello World!")

// Concatenate two strings from an array
Dim strOutput() As String
strOutput.add("hello ")
strOutput.add("World")
print(strOutput(0) + strOutput(1))

// Sum two integers from array
Dim intOut() As Integer
intOut.add(2)
intOut.add(100)
print(str(intOut(0) + intOut(1)))

// While loop with nested For loop
Dim intCount As Integer
Dim c2 As Integer
While intCount < 10
    print(">>>> " + intCount.toString + " <<<<")
    intCount = intCount + 1
    For c2 = 1 To 10 Step 2
        print("## " + str(c2) + " ##")
    Next
Wend

// Array initialization via Array() function
Dim inp() As String
inp = Array("Hello", " ", "WORLD")
print(inp(0) + inp(1) + inp(2))

// String to numeric conversion and formatting
print(val("236"))
var tv as integer = 236
print(tv.tostring)

// Define and use a class
Class TestClass
  Var i As Integer
  Var c As Color
  Var fname As String
  Var lname As String

  Sub Constructor(firstname As String, Optional lastname As String = "Combatti")
    fname = firstname
    self.lname = lastname
    print("Name: " + fname + " " + lastname)
  End Sub

  Sub myMethod(x As Integer, y As Integer)
    print(x.toString + ", " + y.toString)
  End Sub

  Function myFunc() As String
    Return "hello world from TestClass.myFunc()"
  End Function

  Function myFunc2() As Integer
    Return 37
  End Function
End Class

// Instantiate and use TestClass
Dim s As New TestClass("Matthew")
s.i = 10
s.c = &cFF00FF
s.myMethod(20, 15)
print(s.myFunc())
print(str(s.i))
print(s.i.tostring)
print(str(s.c))
print(str(s.myFunc2() + 3))
print(s.fname)
print(s.lname)

// Multi-line string concatenation
print("Hello, " + _
"this is a line concatenation " + _
"test! -" + _
s.fname + " " + s.lname)

// Variant array test
var cc as Color = &c0000FF
var tt() as Variant
tt.add("hello")
tt.add(cc)
tt.add(2216)
print(str(tt.count()))
for tx as integer = 0 to tt.lastindex()
   print(tt(tx))
next

// Boolean and condition test
var bb as Boolean = false
if 3 - 3 = 0 then
  bb = true
end if
print(str(bb))

// Floating-point string conversion
print(str(val("216.14")))

// Fibonacci sequence generator
Dim n As Integer = 20
Print("Fibonacci Series up to " + Str(n) + " terms:")
Dim fibSeries() As Integer 
Dim fib As Integer
For i As Integer = 0 To n - 1 
	fib = Fibonacci(i)
	fibSeries.Add(fib) 
	Print("Fibonacci(" + Str(i) + ") = " + Str(fib)) 
Next

// Golden ratio approximation
Dim goldenRatio As Double 
If n > 1 Then 
	goldenRatio = fibSeries(n-1) / fibSeries(n-2)
	Print("Golden Ratio approximation: " + Str(goldenRatio)) 
End If

Print("Done")

// Determine digit count in a number
Var theNumber As Integer = 33
Var digits As Integer
If theNumber < 10 Then
  digits = 1
ElseIf theNumber < 100 Then
  digits = 2
ElseIf theNumber < 1000 Then
  digits = 3
Else
  digits = 4
End If

// Math function demonstrations
Var x As Double
Var y As Integer
Var r As New Random
Var Pi as Double = 3.14159
x = Abs(-23.9)
Print(Str(x))
x = Acos(1)
Print(Str(x))
y = Asc("A")
Print(Str(y))
x = Asin(0.5)
Print(Str(x))
x = Atan(1)
Print(Str(x))
x = Atan2(3, 4)
Print(Str(x))
x = Ceiling(2.3)
Print(Str(x))
x = Cos(Pi/3)
Print(Str(x))
x = Exp(1)
Print(Str(x))
print(str( 4^2 ))
x = Floor(2.9)
Print(Str(x))
x = Log(2.7183)
Print(Str(x))
x = Max(10, 20)
Print(Str(x))
x = Min(10, 20)
Print(Str(x))
y = 10 Mod 3
Print(Str(y))
Var octValue As String = Oct(10)
Print(octValue)
x = Pow(2, 3)
Print(Str(x))
x = r.InRange(1, 100)
Print(Str(x))
x = Rnd()
Print(Str(x))
x = Round(2.5)
Print(Str(x))
y = Sign(-10)
Print(Str(y))
x = Sin(Pi/2)
Print(Str(x))
x = Sqrt(9)
Print(Str(x))
x = Tan(Pi/4)
Print(Str(x))
x = 2 ^ 3
Print(Str(x))

// Module test
Module MyMod
  Const pIN as Double = 1.683
  Const Pi as Double = 3.14
  Const GRate as Double = 0.22
  Var secret As String = "MySecret123"
  Public Function getRate() as Double
    Print(secret + " Inside Module getRate() method")
    Return GRate
  End Function
End Module

print(str(getRate()))
Print(str(MyMod.getRate()))
print(str(PIN))
Print(secret + " using Module globally accessible method name")
Print(MyMod.secret + " using Module namespace.methodname")

// Select Case control structure
var df as integer = 3
Print("Select Case Test")
select case df
  case 1
    Print(str(1))
  case 2
    Print(Str(2))
  case 3
    Print(str(3))
End select

select case bb
  case true
    Print("this was a " + str(true))
  case false
    Print("this was false")
  case else
    print("this was undecided")
End select

// Enum usage test
Enum foo
  enumvalue1 = 432
  enumvalue2 = 519
  enumvalue3 = 809
end
Var x as integer = foo.enumvalue2
print(str(x))

// Plugin function calls
print(sayhello("matt"))
var xtv as integer = addtwonumbers(1.1735, 3.14159)
print(str(xtv))

// UTF-8 test
print("UTF-8 Support")
print("😊")

// Timing and HTML-to-Markdown conversion
Dim EndTime As Double = ticks
print("Ticks: " + ticks.toString)
EndTime = ticks / 60
print("Run Time: " + str(EndTime) + " seconds")
print("Run Time: " + str(microseconds / 1000000) + " seconds")

// HTML-to-Markdown conversion
var md as String = "<h1>Hello</h1>:" + chr(13) + "<ul><li>HTML to Markdown - yay!</li>" + chr(13) + _
"<li>Testing one </li>" + chr(13) + _
"<li>Testing two </li>" + chr(13) + _
"<li>Testing three</li></ul>"
print( HTMLtoMarkdown(md) )

// Load URL and convert to Markdown
var url as string = "https://www.example.com"
Print("Loading HTML from " + URL + " for translation to Markdown")
var y as string
y = URLtoMarkdown(url)
print(y)
////EOF////

////textinputstream-class.xs////

// -----------------------------------------------------------------------------
// Demo: TextInputStream – Reading Lines from a Text File in CrossBasic
// This script demonstrates how to open a text file using `TextInputStream`,
// read its contents line by line, and print each line to the console.
// -----------------------------------------------------------------------------

// Create a new instance of TextInputStream
Var inputStream As New TextInputStream

// Set the file path of the text file to read
inputStream.FilePath = "example.txt"

// Attempt to open the file for reading
If inputStream.Open() = False Then
  // If the file cannot be opened, show an error and exit
  Print("Failed to open file.")
  Return 0
End If

// While the end of file (EOF) hasn't been reached...
While inputStream.EOF() = 0
  // Read the next line from the file
  Var line As String = inputStream.ReadLine()
  
  // Print the line to the console
  Print(line)
Wend

// Close the file stream to release the handle
inputStream.Close()

////EOF////

////textoutputstream-class.xs////

// -----------------------------------------------------------------------------
// Demo: TextOutputStream – Writing to a Text File in CrossBasic
// This script demonstrates how to create or overwrite a text file using
// `TextOutputStream`, write data with and without line breaks, and ensure
// data is saved properly using `Flush`.
// -----------------------------------------------------------------------------

// Create a new instance of TextOutputStream for file writing
Var stream As New TextOutputStream

// Set the path to the output file and choose not to append (overwrite instead)
stream.FilePath = "example.txt"
stream.Append = False

// Attempt to open the file for writing
If stream.Open() = False Then
  // Exit if file could not be opened
  Print("Failed to open file.")
  Return 0
End If

// Write lines of text (adds a newline after each)
stream.WriteLine("Hello, world!")
stream.WriteLine("This is a test.")

// Write more text without adding newlines
stream.Write("More text without newline.")
stream.Write(" Even More text without newline.")

// Flush the buffer to ensure all data is written 
// (Good practice with large amounts of data being written.)
stream.Flush()

// Close the stream to release the file handle
stream.Close()

// Indicate completion
Print("Text file written successfully.")

////EOF////

////tictactoe.xs////

////tictactoe.xs////

// -----------------------------------------------------------------------------
// Demo: Tic Tac Toe in CrossBasic
// - Creates a 3x3 grid of buttons using XButton
// - Alternates between "X" and "O" on each click
// - Detects wins or draws and resets the board
// -----------------------------------------------------------------------------

// Main window setup
Var win As New XWindow
win.Title              = "Tic Tac Toe"
win.Width              = 320
win.Height             = 360
win.Resizable          = False
win.HasCloseButton     = True
win.HasMinimizeButton  = True
win.HasMaximizeButton  = False
win.HasFullScreenButton = False
win.HasTitleBar        = True
win.SetIcon("ico.png")

AddHandler(win.Closing, AddressOf(OnQuit))

// Game state
Var currentPlayer As String = "X"

// Create 3x3 grid of buttons
Dim btns() As XButton
Dim btnSize As Integer = 90
Dim spacing As Integer = 5
Dim startX  As Integer = 10
Dim startY  As Integer = 10

var row as Integer = 0
var firstRun as Boolean = true
var loopcount as Integer = 0

// — Build the 3x3 Grid —
// Outer loop = rows (0 to 2), inner loop = cols (0 to 2)
For row As Integer = 0 To 2
  For col As Integer = 0 To 2
    // compute linear index if you need it:
    Dim idx As Integer = row * 3 + col

    // create button
    Var b As New XButton
    b.Parent   = win.Handle
    b.Left     = startX + col * (btnSize + spacing)
    b.Top      = startY + row * (btnSize + spacing)
    b.Width    = btnSize
    b.Height   = btnSize
    b.Caption  = ""
    b.FontName = "Arial"
    b.FontSize = 24
    b.Visible  = True

    // hook up your shared handler
    AddHandler(b.Pressed, AddressOf(ButtonPressed))

    // keep a reference
    btns.Add(b)
  Next col
Next row


// Show window and event loop

'Add auto-setters for window type offsets in IDE

win.Width = win.Width - 15
win.Height = win.Height - 32
win.Show()

While True
  DoEvents(10)
Wend

// ——— Event Handlers ———

Sub ButtonPressed(sender as XButton)
  ' find index
  Dim i As Integer = -1
  For jj As Integer = 0 To btns.LastIndex()
    If btns(jj).Handle = sender.Handle Then
      i = jj
      goto DoNext
    End If
  Next jj

  DoNext:

  ' invalid click (already marked)
  If btns(i).Caption <> "" Then 
    Return 0
  end if

  ' mark
  sender.Caption = currentPlayer

  ' win?
  If CheckWin(currentPlayer) Then
    print("player wins")
    win.MessageBox("Player " + currentPlayer + " wins!")
    ResetBoard()
    Return 0
  End If

  ' draw?
  Dim emptyCount As Integer
  For j As Integer = 0 To 8
    If btns(j).Caption = "" Then 
    emptyCount = emptyCount + 1
    end if
  Next j
  If emptyCount = 0 Then
    print("draw 1")
    win.MessageBox("Draw!")
    ResetBoard()
    Return 0
  End If

  ' **now** switch player
  If currentPlayer = "X" Then
    currentPlayer = "O"
  Else
    currentPlayer = "X"
  End If
End Sub


// Check all winning lines for player p
Function CheckWin(p As String) As Boolean
  // Rows
  For r As Integer = 0 To 2
    If btns(r*3).caption = p And btns(r*3+1).caption = p And btns(r*3+2).caption = p Then
      Return True
    End If
  Next r

  // Columns
  For c As Integer = 0 To 2
    If btns(c).caption = p And btns(c+3).caption = p And btns(c+6).caption = p Then
      Return True
    End If
  Next c

  // Diagonals
  If btns(0).caption = p And btns(4).caption = p And btns(8).caption = p Then
    Return True
  End If
  If btns(2).caption = p And btns(4).caption = p And btns(6).caption = p Then
    Return True
  End If
  Return False

 
End Function


// Reset the board for a new game
Sub ResetBoard()
  For k As Integer = 0 To 8
     var b as xbutton = btns(k)
     b.Caption = ""
     'btns(k).caption = "" - This will not work because setters require objects as their class type intstance and not as a typedef of the class.
  Next k
  currentPlayer = "X"
End Sub

// Quit application
Sub OnQuit()
  Quit()
End Sub

////EOF////

////EOF////

////xgraphics.xs////

var x as new XGraphics
x.width = 30
x.height = 30

print(str(x.test))
' xgraphics:instance-123:call

Function PIT(g as XGraphics) as XGraphics
	g.clear()
	g.drawline(0,0,54,50)
	return g
End Function

var c as XGraphics
c = PIT(x)

print(str(c.test))
print(str(c.width) + ", " + str(c.height))
'xgraphics:instance-123:call
////EOF////

